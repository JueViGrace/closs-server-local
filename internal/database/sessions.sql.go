// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: sessions.sql

package database

import (
	"context"
)

const createSession = `-- name: CreateSession :exec
INSERT INTO ke_session(
    token,
    user_id
)
VALUES (?, ?)
`

type CreateSessionParams struct {
	Token  string
	UserID string
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) error {
	_, err := q.db.ExecContext(ctx, createSession, arg.Token, arg.UserID)
	return err
}

const deleteSessionById = `-- name: DeleteSessionById :exec
delete from ke_session
where user_id = ?
`

func (q *Queries) DeleteSessionById(ctx context.Context, userID string) error {
	_, err := q.db.ExecContext(ctx, deleteSessionById, userID)
	return err
}

const deleteSessionByToken = `-- name: DeleteSessionByToken :exec
delete from ke_session
where token = ?
`

func (q *Queries) DeleteSessionByToken(ctx context.Context, token string) error {
	_, err := q.db.ExecContext(ctx, deleteSessionByToken, token)
	return err
}

const getSessionById = `-- name: GetSessionById :one
select token, user_id
from ke_session
where user_id = ?
`

func (q *Queries) GetSessionById(ctx context.Context, userID string) (KeSession, error) {
	row := q.db.QueryRowContext(ctx, getSessionById, userID)
	var i KeSession
	err := row.Scan(&i.Token, &i.UserID)
	return i, err
}

const getSessionByToken = `-- name: GetSessionByToken :one
select token, user_id
from ke_session
where token = ?
`

func (q *Queries) GetSessionByToken(ctx context.Context, token string) (KeSession, error) {
	row := q.db.QueryRowContext(ctx, getSessionByToken, token)
	var i KeSession
	err := row.Scan(&i.Token, &i.UserID)
	return i, err
}

const updateSession = `-- name: UpdateSession :exec
UPDATE ke_session SET
    token = ?
WHERE user_id = ?
`

type UpdateSessionParams struct {
	Token  string
	UserID string
}

func (q *Queries) UpdateSession(ctx context.Context, arg UpdateSessionParams) error {
	_, err := q.db.ExecContext(ctx, updateSession, arg.Token, arg.UserID)
	return err
}
