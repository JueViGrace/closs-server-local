// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user.sql

package database

import (
	"context"
)

const getUserByUsername = `-- name: GetUserByUsername :one
select username, userid, desactivo, sevence, vigenciadesde, vigenciahasta, cedula, fechanac, nombre, direccion, telefono, email, mail_servidor, mail_puerto, mail_login, mail_password, mail_autenticacion, mail_cifrada, cliente, vendedor, almacen, agenciausu, formatofac, copiasfac, formatofac2, copiasfac2, rutaquery, rutareporte, password_app, tipo, fechamodifi
from ke_wusuarios
where username = ? and desactivo != 1
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (KeWusuario, error) {
	row := q.db.QueryRowContext(ctx, getUserByUsername, username)
	var i KeWusuario
	err := row.Scan(
		&i.Username,
		&i.Userid,
		&i.Desactivo,
		&i.Sevence,
		&i.Vigenciadesde,
		&i.Vigenciahasta,
		&i.Cedula,
		&i.Fechanac,
		&i.Nombre,
		&i.Direccion,
		&i.Telefono,
		&i.Email,
		&i.MailServidor,
		&i.MailPuerto,
		&i.MailLogin,
		&i.MailPassword,
		&i.MailAutenticacion,
		&i.MailCifrada,
		&i.Cliente,
		&i.Vendedor,
		&i.Almacen,
		&i.Agenciausu,
		&i.Formatofac,
		&i.Copiasfac,
		&i.Formatofac2,
		&i.Copiasfac2,
		&i.Rutaquery,
		&i.Rutareporte,
		&i.PasswordApp,
		&i.Tipo,
		&i.Fechamodifi,
	)
	return i, err
}

const getUsers = `-- name: GetUsers :many
select username, userid, desactivo, sevence, vigenciadesde, vigenciahasta, cedula, fechanac, nombre, direccion, telefono, email, mail_servidor, mail_puerto, mail_login, mail_password, mail_autenticacion, mail_cifrada, cliente, vendedor, almacen, agenciausu, formatofac, copiasfac, formatofac2, copiasfac2, rutaquery, rutareporte, password_app, tipo, fechamodifi
from ke_wusuarios
`

func (q *Queries) GetUsers(ctx context.Context) ([]KeWusuario, error) {
	rows, err := q.db.QueryContext(ctx, getUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []KeWusuario
	for rows.Next() {
		var i KeWusuario
		if err := rows.Scan(
			&i.Username,
			&i.Userid,
			&i.Desactivo,
			&i.Sevence,
			&i.Vigenciadesde,
			&i.Vigenciahasta,
			&i.Cedula,
			&i.Fechanac,
			&i.Nombre,
			&i.Direccion,
			&i.Telefono,
			&i.Email,
			&i.MailServidor,
			&i.MailPuerto,
			&i.MailLogin,
			&i.MailPassword,
			&i.MailAutenticacion,
			&i.MailCifrada,
			&i.Cliente,
			&i.Vendedor,
			&i.Almacen,
			&i.Agenciausu,
			&i.Formatofac,
			&i.Copiasfac,
			&i.Formatofac2,
			&i.Copiasfac2,
			&i.Rutaquery,
			&i.Rutareporte,
			&i.PasswordApp,
			&i.Tipo,
			&i.Fechamodifi,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePassword = `-- name: UpdatePassword :exec
update ke_wusuarios set
    mail_password = ?
where username = ?
`

type UpdatePasswordParams struct {
	MailPassword string
	Username     string
}

func (q *Queries) UpdatePassword(ctx context.Context, arg UpdatePasswordParams) error {
	_, err := q.db.ExecContext(ctx, updatePassword, arg.MailPassword, arg.Username)
	return err
}
