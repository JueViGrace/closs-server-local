// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: company.sql

package db

import (
	"context"
	"database/sql"
)

const createCompany = `-- name: CreateCompany :one
;

INSERT INTO closs_company (
    ked_codigo,
    ked_nombre,
    ked_status,
    ked_enlace,
    ked_agen,
    created_at,
    updated_at
)
VALUES (?, ?, ?, ?, ?, ?, ?)
RETURNING ked_codigo, ked_nombre, ked_status, ked_enlace, ked_agen, created_at, updated_at, deleted_at
`

type CreateCompanyParams struct {
	KedCodigo string
	KedNombre string
	KedStatus int64
	KedEnlace string
	KedAgen   string
	CreatedAt string
	UpdatedAt string
}

func (q *Queries) CreateCompany(ctx context.Context, arg CreateCompanyParams) (ClossCompany, error) {
	row := q.db.QueryRowContext(ctx, createCompany,
		arg.KedCodigo,
		arg.KedNombre,
		arg.KedStatus,
		arg.KedEnlace,
		arg.KedAgen,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i ClossCompany
	err := row.Scan(
		&i.KedCodigo,
		&i.KedNombre,
		&i.KedStatus,
		&i.KedEnlace,
		&i.KedAgen,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deleteCompany = `-- name: DeleteCompany :exec
delete from closs_company
where ked_codigo = ?
`

func (q *Queries) DeleteCompany(ctx context.Context, kedCodigo string) error {
	_, err := q.db.ExecContext(ctx, deleteCompany, kedCodigo)
	return err
}

const getCompanies = `-- name: GetCompanies :many
select ked_codigo, ked_nombre, ked_status, ked_enlace, ked_agen, created_at, updated_at, deleted_at
from closs_company
`

func (q *Queries) GetCompanies(ctx context.Context) ([]ClossCompany, error) {
	rows, err := q.db.QueryContext(ctx, getCompanies)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ClossCompany
	for rows.Next() {
		var i ClossCompany
		if err := rows.Scan(
			&i.KedCodigo,
			&i.KedNombre,
			&i.KedStatus,
			&i.KedEnlace,
			&i.KedAgen,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCompanyByCode = `-- name: GetCompanyByCode :one
;

select ked_codigo, ked_nombre, ked_status, ked_enlace, ked_agen, created_at, updated_at, deleted_at
from closs_company
where ked_codigo = ?
`

func (q *Queries) GetCompanyByCode(ctx context.Context, kedCodigo string) (ClossCompany, error) {
	row := q.db.QueryRowContext(ctx, getCompanyByCode, kedCodigo)
	var i ClossCompany
	err := row.Scan(
		&i.KedCodigo,
		&i.KedNombre,
		&i.KedStatus,
		&i.KedEnlace,
		&i.KedAgen,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getExistingCompanyByCode = `-- name: GetExistingCompanyByCode :one
;

select ked_codigo, ked_nombre, ked_status, ked_enlace, ked_agen, created_at, updated_at, deleted_at
from closs_company
where ked_codigo = ? and (ked_status = 1 or deleted_at is null)
`

func (q *Queries) GetExistingCompanyByCode(ctx context.Context, kedCodigo string) (ClossCompany, error) {
	row := q.db.QueryRowContext(ctx, getExistingCompanyByCode, kedCodigo)
	var i ClossCompany
	err := row.Scan(
		&i.KedCodigo,
		&i.KedNombre,
		&i.KedStatus,
		&i.KedEnlace,
		&i.KedAgen,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const softDeleteCompany = `-- name: SoftDeleteCompany :exec
UPDATE closs_company SET 
    ked_status = 0,
    updated_at = ?,
    deleted_at = ?
WHERE ked_codigo = ?
`

type SoftDeleteCompanyParams struct {
	UpdatedAt string
	DeletedAt sql.NullString
	KedCodigo string
}

func (q *Queries) SoftDeleteCompany(ctx context.Context, arg SoftDeleteCompanyParams) error {
	_, err := q.db.ExecContext(ctx, softDeleteCompany, arg.UpdatedAt, arg.DeletedAt, arg.KedCodigo)
	return err
}

const updateCompany = `-- name: UpdateCompany :one
UPDATE closs_company SET 
    ked_nombre = ?,
    ked_status = ?, 
    ked_enlace = ?,
    ked_agen = ?,
    updated_at = ?
WHERE ked_codigo = ?
RETURNING ked_codigo, ked_nombre, ked_status, ked_enlace, ked_agen, created_at, updated_at, deleted_at
`

type UpdateCompanyParams struct {
	KedNombre string
	KedStatus int64
	KedEnlace string
	KedAgen   string
	UpdatedAt string
	KedCodigo string
}

func (q *Queries) UpdateCompany(ctx context.Context, arg UpdateCompanyParams) (ClossCompany, error) {
	row := q.db.QueryRowContext(ctx, updateCompany,
		arg.KedNombre,
		arg.KedStatus,
		arg.KedEnlace,
		arg.KedAgen,
		arg.UpdatedAt,
		arg.KedCodigo,
	)
	var i ClossCompany
	err := row.Scan(
		&i.KedCodigo,
		&i.KedNombre,
		&i.KedStatus,
		&i.KedEnlace,
		&i.KedAgen,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
