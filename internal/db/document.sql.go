// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: document.sql

package db

import (
	"context"
	"database/sql"
)

const createDocument = `-- name: CreateDocument :one
;

INSERT INTO closs_document (
    agencia,
    tipodoc,
    documento,
    tipodocv,
    codcliente,
    nombrecli,
    contribesp,
    ruta_parme,
    tipoprecio,
    emision,
    recepcion,
    vence,
    diascred,
    estatusdoc,
    dtotneto,
    dtotimpuest,
    dtotalfinal,
    dtotpagos,
    dtotdescuen,
    dFlete,
    dtotdev,
    dvndmtototal,
    dretencion,
    dretencioniva,
    vendedor,
    codcoord,
    aceptadev,
    kti_negesp,
    bsiva,
    bsflete,
    bsretencion,
    bsretencioniva,
    tasadoc,
    mtodcto,
    fchvencedcto,
    tienedcto,
    cbsret,
    cdret,
    cbsretiva,
    cdretiva,
    cbsrparme,
    cdrparme,
    cbsretflete,
    cdretflete,
    bsmtoiva,
    bsmtofte,
    retmun_mto,
    dolarflete,
    bsretflete,
    dretflete,
    dretmun_mto,
    retivaoblig,
    edoentrega,
    dmtoiva,
    prcdctoaplic,
    montodctodol,
    montodctobs,
    created_at,
    updated_at
)
values (
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?
)
RETURNING agencia, tipodoc, documento, tipodocv, codcliente, nombrecli, contribesp, ruta_parme, tipoprecio, emision, recepcion, vence, diascred, estatusdoc, dtotneto, dtotimpuest, dtotalfinal, dtotpagos, dtotdescuen, dflete, dtotdev, dvndmtototal, dretencion, dretencioniva, vendedor, codcoord, aceptadev, kti_negesp, bsiva, bsflete, bsretencion, bsretencioniva, tasadoc, mtodcto, fchvencedcto, tienedcto, cbsret, cdret, cbsretiva, cdretiva, cbsrparme, cdrparme, cbsretflete, cdretflete, bsmtoiva, bsmtofte, retmun_mto, dolarflete, bsretflete, dretflete, dretmun_mto, retivaoblig, edoentrega, dmtoiva, prcdctoaplic, montodctodol, montodctobs, created_at, updated_at
`

type CreateDocumentParams struct {
	Agencia        string
	Tipodoc        string
	Documento      string
	Tipodocv       string
	Codcliente     string
	Nombrecli      string
	Contribesp     int64
	RutaParme      int64
	Tipoprecio     int64
	Emision        string
	Recepcion      string
	Vence          string
	Diascred       int64
	Estatusdoc     int64
	Dtotneto       float64
	Dtotimpuest    float64
	Dtotalfinal    float64
	Dtotpagos      float64
	Dtotdescuen    float64
	Dflete         float64
	Dtotdev        float64
	Dvndmtototal   float64
	Dretencion     float64
	Dretencioniva  float64
	Vendedor       string
	Codcoord       string
	Aceptadev      int64
	KtiNegesp      int64
	Bsiva          float64
	Bsflete        float64
	Bsretencion    float64
	Bsretencioniva float64
	Tasadoc        float64
	Mtodcto        float64
	Fchvencedcto   string
	Tienedcto      int64
	Cbsret         float64
	Cdret          float64
	Cbsretiva      float64
	Cdretiva       float64
	Cbsrparme      float64
	Cdrparme       float64
	Cbsretflete    float64
	Cdretflete     float64
	Bsmtoiva       float64
	Bsmtofte       float64
	RetmunMto      float64
	Dolarflete     int64
	Bsretflete     float64
	Dretflete      float64
	DretmunMto     float64
	Retivaoblig    int64
	Edoentrega     int64
	Dmtoiva        float64
	Prcdctoaplic   float64
	Montodctodol   float64
	Montodctobs    float64
	CreatedAt      string
	UpdatedAt      string
}

func (q *Queries) CreateDocument(ctx context.Context, arg CreateDocumentParams) (ClossDocument, error) {
	row := q.db.QueryRowContext(ctx, createDocument,
		arg.Agencia,
		arg.Tipodoc,
		arg.Documento,
		arg.Tipodocv,
		arg.Codcliente,
		arg.Nombrecli,
		arg.Contribesp,
		arg.RutaParme,
		arg.Tipoprecio,
		arg.Emision,
		arg.Recepcion,
		arg.Vence,
		arg.Diascred,
		arg.Estatusdoc,
		arg.Dtotneto,
		arg.Dtotimpuest,
		arg.Dtotalfinal,
		arg.Dtotpagos,
		arg.Dtotdescuen,
		arg.Dflete,
		arg.Dtotdev,
		arg.Dvndmtototal,
		arg.Dretencion,
		arg.Dretencioniva,
		arg.Vendedor,
		arg.Codcoord,
		arg.Aceptadev,
		arg.KtiNegesp,
		arg.Bsiva,
		arg.Bsflete,
		arg.Bsretencion,
		arg.Bsretencioniva,
		arg.Tasadoc,
		arg.Mtodcto,
		arg.Fchvencedcto,
		arg.Tienedcto,
		arg.Cbsret,
		arg.Cdret,
		arg.Cbsretiva,
		arg.Cdretiva,
		arg.Cbsrparme,
		arg.Cdrparme,
		arg.Cbsretflete,
		arg.Cdretflete,
		arg.Bsmtoiva,
		arg.Bsmtofte,
		arg.RetmunMto,
		arg.Dolarflete,
		arg.Bsretflete,
		arg.Dretflete,
		arg.DretmunMto,
		arg.Retivaoblig,
		arg.Edoentrega,
		arg.Dmtoiva,
		arg.Prcdctoaplic,
		arg.Montodctodol,
		arg.Montodctobs,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i ClossDocument
	err := row.Scan(
		&i.Agencia,
		&i.Tipodoc,
		&i.Documento,
		&i.Tipodocv,
		&i.Codcliente,
		&i.Nombrecli,
		&i.Contribesp,
		&i.RutaParme,
		&i.Tipoprecio,
		&i.Emision,
		&i.Recepcion,
		&i.Vence,
		&i.Diascred,
		&i.Estatusdoc,
		&i.Dtotneto,
		&i.Dtotimpuest,
		&i.Dtotalfinal,
		&i.Dtotpagos,
		&i.Dtotdescuen,
		&i.Dflete,
		&i.Dtotdev,
		&i.Dvndmtototal,
		&i.Dretencion,
		&i.Dretencioniva,
		&i.Vendedor,
		&i.Codcoord,
		&i.Aceptadev,
		&i.KtiNegesp,
		&i.Bsiva,
		&i.Bsflete,
		&i.Bsretencion,
		&i.Bsretencioniva,
		&i.Tasadoc,
		&i.Mtodcto,
		&i.Fchvencedcto,
		&i.Tienedcto,
		&i.Cbsret,
		&i.Cdret,
		&i.Cbsretiva,
		&i.Cdretiva,
		&i.Cbsrparme,
		&i.Cdrparme,
		&i.Cbsretflete,
		&i.Cdretflete,
		&i.Bsmtoiva,
		&i.Bsmtofte,
		&i.RetmunMto,
		&i.Dolarflete,
		&i.Bsretflete,
		&i.Dretflete,
		&i.DretmunMto,
		&i.Retivaoblig,
		&i.Edoentrega,
		&i.Dmtoiva,
		&i.Prcdctoaplic,
		&i.Montodctodol,
		&i.Montodctobs,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getDocumentByCode = `-- name: GetDocumentByCode :one
;

select agencia, tipodoc, documento, tipodocv, codcliente, nombrecli, contribesp, ruta_parme, tipoprecio, emision, recepcion, vence, diascred, estatusdoc, dtotneto, dtotimpuest, dtotalfinal, dtotpagos, dtotdescuen, dflete, dtotdev, dvndmtototal, dretencion, dretencioniva, vendedor, codcoord, aceptadev, kti_negesp, bsiva, bsflete, bsretencion, bsretencioniva, tasadoc, mtodcto, fchvencedcto, tienedcto, cbsret, cdret, cbsretiva, cdretiva, cbsrparme, cdrparme, cbsretflete, cdretflete, bsmtoiva, bsmtofte, retmun_mto, dolarflete, bsretflete, dretflete, dretmun_mto, retivaoblig, edoentrega, dmtoiva, prcdctoaplic, montodctodol, montodctobs, created_at, updated_at
from closs_document
where documento = ?
`

func (q *Queries) GetDocumentByCode(ctx context.Context, documento string) (ClossDocument, error) {
	row := q.db.QueryRowContext(ctx, getDocumentByCode, documento)
	var i ClossDocument
	err := row.Scan(
		&i.Agencia,
		&i.Tipodoc,
		&i.Documento,
		&i.Tipodocv,
		&i.Codcliente,
		&i.Nombrecli,
		&i.Contribesp,
		&i.RutaParme,
		&i.Tipoprecio,
		&i.Emision,
		&i.Recepcion,
		&i.Vence,
		&i.Diascred,
		&i.Estatusdoc,
		&i.Dtotneto,
		&i.Dtotimpuest,
		&i.Dtotalfinal,
		&i.Dtotpagos,
		&i.Dtotdescuen,
		&i.Dflete,
		&i.Dtotdev,
		&i.Dvndmtototal,
		&i.Dretencion,
		&i.Dretencioniva,
		&i.Vendedor,
		&i.Codcoord,
		&i.Aceptadev,
		&i.KtiNegesp,
		&i.Bsiva,
		&i.Bsflete,
		&i.Bsretencion,
		&i.Bsretencioniva,
		&i.Tasadoc,
		&i.Mtodcto,
		&i.Fchvencedcto,
		&i.Tienedcto,
		&i.Cbsret,
		&i.Cdret,
		&i.Cbsretiva,
		&i.Cdretiva,
		&i.Cbsrparme,
		&i.Cdrparme,
		&i.Cbsretflete,
		&i.Cdretflete,
		&i.Bsmtoiva,
		&i.Bsmtofte,
		&i.RetmunMto,
		&i.Dolarflete,
		&i.Bsretflete,
		&i.Dretflete,
		&i.DretmunMto,
		&i.Retivaoblig,
		&i.Edoentrega,
		&i.Dmtoiva,
		&i.Prcdctoaplic,
		&i.Montodctodol,
		&i.Montodctobs,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getDocumentWithLinesByCode = `-- name: GetDocumentWithLinesByCode :many
;

select closs_document.agencia, closs_document.tipodoc, closs_document.documento, closs_document.tipodocv, codcliente, nombrecli, contribesp, ruta_parme, tipoprecio, emision, recepcion, vence, diascred, estatusdoc, dtotneto, dtotimpuest, dtotalfinal, dtotpagos, dtotdescuen, dflete, dtotdev, closs_document.dvndmtototal, dretencion, dretencioniva, closs_document.vendedor, closs_document.codcoord, aceptadev, kti_negesp, bsiva, bsflete, bsretencion, bsretencioniva, tasadoc, mtodcto, fchvencedcto, tienedcto, cbsret, cdret, cbsretiva, cdretiva, cbsrparme, cdrparme, cbsretflete, cdretflete, bsmtoiva, bsmtofte, retmun_mto, dolarflete, bsretflete, dretflete, dretmun_mto, retivaoblig, edoentrega, dmtoiva, prcdctoaplic, montodctodol, montodctobs, created_at, updated_at, closs_document_lines.agencia, closs_document_lines.tipodoc, closs_document_lines.documento, closs_document_lines.tipodocv, grupo, subgrupo, origen, codigo, codhijo, pid, nombre, cantidad, cntdevuelt, vndcntdevuelt, closs_document_lines.dvndmtototal, dpreciofin, dpreciounit, dmontoneto, dmontototal, timpueprc, unidevuelt, fechadoc, closs_document_lines.vendedor, closs_document_lines.codcoord
from closs_document
left join
    closs_document_lines on closs_document.documento = closs_document_lines.documento
where closs_document.documento = ?
`

type GetDocumentWithLinesByCodeRow struct {
	Agencia        string
	Tipodoc        string
	Documento      string
	Tipodocv       string
	Codcliente     string
	Nombrecli      string
	Contribesp     int64
	RutaParme      int64
	Tipoprecio     int64
	Emision        string
	Recepcion      string
	Vence          string
	Diascred       int64
	Estatusdoc     int64
	Dtotneto       float64
	Dtotimpuest    float64
	Dtotalfinal    float64
	Dtotpagos      float64
	Dtotdescuen    float64
	Dflete         float64
	Dtotdev        float64
	Dvndmtototal   float64
	Dretencion     float64
	Dretencioniva  float64
	Vendedor       string
	Codcoord       string
	Aceptadev      int64
	KtiNegesp      int64
	Bsiva          float64
	Bsflete        float64
	Bsretencion    float64
	Bsretencioniva float64
	Tasadoc        float64
	Mtodcto        float64
	Fchvencedcto   string
	Tienedcto      int64
	Cbsret         float64
	Cdret          float64
	Cbsretiva      float64
	Cdretiva       float64
	Cbsrparme      float64
	Cdrparme       float64
	Cbsretflete    float64
	Cdretflete     float64
	Bsmtoiva       float64
	Bsmtofte       float64
	RetmunMto      float64
	Dolarflete     int64
	Bsretflete     float64
	Dretflete      float64
	DretmunMto     float64
	Retivaoblig    int64
	Edoentrega     int64
	Dmtoiva        float64
	Prcdctoaplic   float64
	Montodctodol   float64
	Montodctobs    float64
	CreatedAt      string
	UpdatedAt      string
	Agencia_2      sql.NullString
	Tipodoc_2      sql.NullString
	Documento_2    sql.NullString
	Tipodocv_2     sql.NullString
	Grupo          sql.NullString
	Subgrupo       sql.NullString
	Origen         sql.NullInt64
	Codigo         sql.NullString
	Codhijo        sql.NullString
	Pid            sql.NullString
	Nombre         sql.NullString
	Cantidad       sql.NullInt64
	Cntdevuelt     sql.NullInt64
	Vndcntdevuelt  sql.NullInt64
	Dvndmtototal_2 sql.NullFloat64
	Dpreciofin     sql.NullFloat64
	Dpreciounit    sql.NullFloat64
	Dmontoneto     sql.NullFloat64
	Dmontototal    sql.NullFloat64
	Timpueprc      sql.NullFloat64
	Unidevuelt     sql.NullInt64
	Fechadoc       sql.NullString
	Vendedor_2     sql.NullString
	Codcoord_2     sql.NullString
}

func (q *Queries) GetDocumentWithLinesByCode(ctx context.Context, documento string) ([]GetDocumentWithLinesByCodeRow, error) {
	rows, err := q.db.QueryContext(ctx, getDocumentWithLinesByCode, documento)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetDocumentWithLinesByCodeRow
	for rows.Next() {
		var i GetDocumentWithLinesByCodeRow
		if err := rows.Scan(
			&i.Agencia,
			&i.Tipodoc,
			&i.Documento,
			&i.Tipodocv,
			&i.Codcliente,
			&i.Nombrecli,
			&i.Contribesp,
			&i.RutaParme,
			&i.Tipoprecio,
			&i.Emision,
			&i.Recepcion,
			&i.Vence,
			&i.Diascred,
			&i.Estatusdoc,
			&i.Dtotneto,
			&i.Dtotimpuest,
			&i.Dtotalfinal,
			&i.Dtotpagos,
			&i.Dtotdescuen,
			&i.Dflete,
			&i.Dtotdev,
			&i.Dvndmtototal,
			&i.Dretencion,
			&i.Dretencioniva,
			&i.Vendedor,
			&i.Codcoord,
			&i.Aceptadev,
			&i.KtiNegesp,
			&i.Bsiva,
			&i.Bsflete,
			&i.Bsretencion,
			&i.Bsretencioniva,
			&i.Tasadoc,
			&i.Mtodcto,
			&i.Fchvencedcto,
			&i.Tienedcto,
			&i.Cbsret,
			&i.Cdret,
			&i.Cbsretiva,
			&i.Cdretiva,
			&i.Cbsrparme,
			&i.Cdrparme,
			&i.Cbsretflete,
			&i.Cdretflete,
			&i.Bsmtoiva,
			&i.Bsmtofte,
			&i.RetmunMto,
			&i.Dolarflete,
			&i.Bsretflete,
			&i.Dretflete,
			&i.DretmunMto,
			&i.Retivaoblig,
			&i.Edoentrega,
			&i.Dmtoiva,
			&i.Prcdctoaplic,
			&i.Montodctodol,
			&i.Montodctobs,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Agencia_2,
			&i.Tipodoc_2,
			&i.Documento_2,
			&i.Tipodocv_2,
			&i.Grupo,
			&i.Subgrupo,
			&i.Origen,
			&i.Codigo,
			&i.Codhijo,
			&i.Pid,
			&i.Nombre,
			&i.Cantidad,
			&i.Cntdevuelt,
			&i.Vndcntdevuelt,
			&i.Dvndmtototal_2,
			&i.Dpreciofin,
			&i.Dpreciounit,
			&i.Dmontoneto,
			&i.Dmontototal,
			&i.Timpueprc,
			&i.Unidevuelt,
			&i.Fechadoc,
			&i.Vendedor_2,
			&i.Codcoord_2,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDocuments = `-- name: GetDocuments :many
select agencia, tipodoc, documento, tipodocv, codcliente, nombrecli, contribesp, ruta_parme, tipoprecio, emision, recepcion, vence, diascred, estatusdoc, dtotneto, dtotimpuest, dtotalfinal, dtotpagos, dtotdescuen, dflete, dtotdev, dvndmtototal, dretencion, dretencioniva, vendedor, codcoord, aceptadev, kti_negesp, bsiva, bsflete, bsretencion, bsretencioniva, tasadoc, mtodcto, fchvencedcto, tienedcto, cbsret, cdret, cbsretiva, cdretiva, cbsrparme, cdrparme, cbsretflete, cdretflete, bsmtoiva, bsmtofte, retmun_mto, dolarflete, bsretflete, dretflete, dretmun_mto, retivaoblig, edoentrega, dmtoiva, prcdctoaplic, montodctodol, montodctobs, created_at, updated_at
from closs_document
`

func (q *Queries) GetDocuments(ctx context.Context) ([]ClossDocument, error) {
	rows, err := q.db.QueryContext(ctx, getDocuments)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ClossDocument
	for rows.Next() {
		var i ClossDocument
		if err := rows.Scan(
			&i.Agencia,
			&i.Tipodoc,
			&i.Documento,
			&i.Tipodocv,
			&i.Codcliente,
			&i.Nombrecli,
			&i.Contribesp,
			&i.RutaParme,
			&i.Tipoprecio,
			&i.Emision,
			&i.Recepcion,
			&i.Vence,
			&i.Diascred,
			&i.Estatusdoc,
			&i.Dtotneto,
			&i.Dtotimpuest,
			&i.Dtotalfinal,
			&i.Dtotpagos,
			&i.Dtotdescuen,
			&i.Dflete,
			&i.Dtotdev,
			&i.Dvndmtototal,
			&i.Dretencion,
			&i.Dretencioniva,
			&i.Vendedor,
			&i.Codcoord,
			&i.Aceptadev,
			&i.KtiNegesp,
			&i.Bsiva,
			&i.Bsflete,
			&i.Bsretencion,
			&i.Bsretencioniva,
			&i.Tasadoc,
			&i.Mtodcto,
			&i.Fchvencedcto,
			&i.Tienedcto,
			&i.Cbsret,
			&i.Cdret,
			&i.Cbsretiva,
			&i.Cdretiva,
			&i.Cbsrparme,
			&i.Cdrparme,
			&i.Cbsretflete,
			&i.Cdretflete,
			&i.Bsmtoiva,
			&i.Bsmtofte,
			&i.RetmunMto,
			&i.Dolarflete,
			&i.Bsretflete,
			&i.Dretflete,
			&i.DretmunMto,
			&i.Retivaoblig,
			&i.Edoentrega,
			&i.Dmtoiva,
			&i.Prcdctoaplic,
			&i.Montodctodol,
			&i.Montodctobs,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDocumentsByCustomer = `-- name: GetDocumentsByCustomer :many
;

select closs_document.agencia, closs_document.tipodoc, closs_document.documento, closs_document.tipodocv, closs_document.codcliente, closs_document.nombrecli, closs_document.contribesp, closs_document.ruta_parme, closs_document.tipoprecio, closs_document.emision, closs_document.recepcion, closs_document.vence, closs_document.diascred, closs_document.estatusdoc, closs_document.dtotneto, closs_document.dtotimpuest, closs_document.dtotalfinal, closs_document.dtotpagos, closs_document.dtotdescuen, closs_document.dflete, closs_document.dtotdev, closs_document.dvndmtototal, closs_document.dretencion, closs_document.dretencioniva, closs_document.vendedor, closs_document.codcoord, closs_document.aceptadev, closs_document.kti_negesp, closs_document.bsiva, closs_document.bsflete, closs_document.bsretencion, closs_document.bsretencioniva, closs_document.tasadoc, closs_document.mtodcto, closs_document.fchvencedcto, closs_document.tienedcto, closs_document.cbsret, closs_document.cdret, closs_document.cbsretiva, closs_document.cdretiva, closs_document.cbsrparme, closs_document.cdrparme, closs_document.cbsretflete, closs_document.cdretflete, closs_document.bsmtoiva, closs_document.bsmtofte, closs_document.retmun_mto, closs_document.dolarflete, closs_document.bsretflete, closs_document.dretflete, closs_document.dretmun_mto, closs_document.retivaoblig, closs_document.edoentrega, closs_document.dmtoiva, closs_document.prcdctoaplic, closs_document.montodctodol, closs_document.montodctobs, closs_document.created_at, closs_document.updated_at
from closs_document
where closs_document.codcliente = ?
order by closs_document.emision desc
`

func (q *Queries) GetDocumentsByCustomer(ctx context.Context, codcliente string) ([]ClossDocument, error) {
	rows, err := q.db.QueryContext(ctx, getDocumentsByCustomer, codcliente)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ClossDocument
	for rows.Next() {
		var i ClossDocument
		if err := rows.Scan(
			&i.Agencia,
			&i.Tipodoc,
			&i.Documento,
			&i.Tipodocv,
			&i.Codcliente,
			&i.Nombrecli,
			&i.Contribesp,
			&i.RutaParme,
			&i.Tipoprecio,
			&i.Emision,
			&i.Recepcion,
			&i.Vence,
			&i.Diascred,
			&i.Estatusdoc,
			&i.Dtotneto,
			&i.Dtotimpuest,
			&i.Dtotalfinal,
			&i.Dtotpagos,
			&i.Dtotdescuen,
			&i.Dflete,
			&i.Dtotdev,
			&i.Dvndmtototal,
			&i.Dretencion,
			&i.Dretencioniva,
			&i.Vendedor,
			&i.Codcoord,
			&i.Aceptadev,
			&i.KtiNegesp,
			&i.Bsiva,
			&i.Bsflete,
			&i.Bsretencion,
			&i.Bsretencioniva,
			&i.Tasadoc,
			&i.Mtodcto,
			&i.Fchvencedcto,
			&i.Tienedcto,
			&i.Cbsret,
			&i.Cdret,
			&i.Cbsretiva,
			&i.Cdretiva,
			&i.Cbsrparme,
			&i.Cdrparme,
			&i.Cbsretflete,
			&i.Cdretflete,
			&i.Bsmtoiva,
			&i.Bsmtofte,
			&i.RetmunMto,
			&i.Dolarflete,
			&i.Bsretflete,
			&i.Dretflete,
			&i.DretmunMto,
			&i.Retivaoblig,
			&i.Edoentrega,
			&i.Dmtoiva,
			&i.Prcdctoaplic,
			&i.Montodctodol,
			&i.Montodctobs,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDocumentsByManager = `-- name: GetDocumentsByManager :many
;

select closs_document.agencia, closs_document.tipodoc, closs_document.documento, closs_document.tipodocv, closs_document.codcliente, closs_document.nombrecli, closs_document.contribesp, closs_document.ruta_parme, closs_document.tipoprecio, closs_document.emision, closs_document.recepcion, closs_document.vence, closs_document.diascred, closs_document.estatusdoc, closs_document.dtotneto, closs_document.dtotimpuest, closs_document.dtotalfinal, closs_document.dtotpagos, closs_document.dtotdescuen, closs_document.dflete, closs_document.dtotdev, closs_document.dvndmtototal, closs_document.dretencion, closs_document.dretencioniva, closs_document.vendedor, closs_document.codcoord, closs_document.aceptadev, closs_document.kti_negesp, closs_document.bsiva, closs_document.bsflete, closs_document.bsretencion, closs_document.bsretencioniva, closs_document.tasadoc, closs_document.mtodcto, closs_document.fchvencedcto, closs_document.tienedcto, closs_document.cbsret, closs_document.cdret, closs_document.cbsretiva, closs_document.cdretiva, closs_document.cbsrparme, closs_document.cdrparme, closs_document.cbsretflete, closs_document.cdretflete, closs_document.bsmtoiva, closs_document.bsmtofte, closs_document.retmun_mto, closs_document.dolarflete, closs_document.bsretflete, closs_document.dretflete, closs_document.dretmun_mto, closs_document.retivaoblig, closs_document.edoentrega, closs_document.dmtoiva, closs_document.prcdctoaplic, closs_document.montodctodol, closs_document.montodctobs, closs_document.created_at, closs_document.updated_at
from closs_document
left join closs_managers on closs_document.codcoord = closs_managers.kng_codcoord
where closs_managers.kng_codgcia = ?
order by
    closs_document.vendedor asc,
    closs_document.emision desc,
    closs_document.codcliente asc
`

func (q *Queries) GetDocumentsByManager(ctx context.Context, kngCodgcia string) ([]ClossDocument, error) {
	rows, err := q.db.QueryContext(ctx, getDocumentsByManager, kngCodgcia)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ClossDocument
	for rows.Next() {
		var i ClossDocument
		if err := rows.Scan(
			&i.Agencia,
			&i.Tipodoc,
			&i.Documento,
			&i.Tipodocv,
			&i.Codcliente,
			&i.Nombrecli,
			&i.Contribesp,
			&i.RutaParme,
			&i.Tipoprecio,
			&i.Emision,
			&i.Recepcion,
			&i.Vence,
			&i.Diascred,
			&i.Estatusdoc,
			&i.Dtotneto,
			&i.Dtotimpuest,
			&i.Dtotalfinal,
			&i.Dtotpagos,
			&i.Dtotdescuen,
			&i.Dflete,
			&i.Dtotdev,
			&i.Dvndmtototal,
			&i.Dretencion,
			&i.Dretencioniva,
			&i.Vendedor,
			&i.Codcoord,
			&i.Aceptadev,
			&i.KtiNegesp,
			&i.Bsiva,
			&i.Bsflete,
			&i.Bsretencion,
			&i.Bsretencioniva,
			&i.Tasadoc,
			&i.Mtodcto,
			&i.Fchvencedcto,
			&i.Tienedcto,
			&i.Cbsret,
			&i.Cdret,
			&i.Cbsretiva,
			&i.Cdretiva,
			&i.Cbsrparme,
			&i.Cdrparme,
			&i.Cbsretflete,
			&i.Cdretflete,
			&i.Bsmtoiva,
			&i.Bsmtofte,
			&i.RetmunMto,
			&i.Dolarflete,
			&i.Bsretflete,
			&i.Dretflete,
			&i.DretmunMto,
			&i.Retivaoblig,
			&i.Edoentrega,
			&i.Dmtoiva,
			&i.Prcdctoaplic,
			&i.Montodctodol,
			&i.Montodctobs,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDocumentsBySalesman = `-- name: GetDocumentsBySalesman :many
;

select closs_document.agencia, closs_document.tipodoc, closs_document.documento, closs_document.tipodocv, closs_document.codcliente, closs_document.nombrecli, closs_document.contribesp, closs_document.ruta_parme, closs_document.tipoprecio, closs_document.emision, closs_document.recepcion, closs_document.vence, closs_document.diascred, closs_document.estatusdoc, closs_document.dtotneto, closs_document.dtotimpuest, closs_document.dtotalfinal, closs_document.dtotpagos, closs_document.dtotdescuen, closs_document.dflete, closs_document.dtotdev, closs_document.dvndmtototal, closs_document.dretencion, closs_document.dretencioniva, closs_document.vendedor, closs_document.codcoord, closs_document.aceptadev, closs_document.kti_negesp, closs_document.bsiva, closs_document.bsflete, closs_document.bsretencion, closs_document.bsretencioniva, closs_document.tasadoc, closs_document.mtodcto, closs_document.fchvencedcto, closs_document.tienedcto, closs_document.cbsret, closs_document.cdret, closs_document.cbsretiva, closs_document.cdretiva, closs_document.cbsrparme, closs_document.cdrparme, closs_document.cbsretflete, closs_document.cdretflete, closs_document.bsmtoiva, closs_document.bsmtofte, closs_document.retmun_mto, closs_document.dolarflete, closs_document.bsretflete, closs_document.dretflete, closs_document.dretmun_mto, closs_document.retivaoblig, closs_document.edoentrega, closs_document.dmtoiva, closs_document.prcdctoaplic, closs_document.montodctodol, closs_document.montodctobs, closs_document.created_at, closs_document.updated_at
from closs_document
where closs_document.vendedor = ?
order by closs_document.codcliente asc, closs_document.emision desc
`

func (q *Queries) GetDocumentsBySalesman(ctx context.Context, vendedor string) ([]ClossDocument, error) {
	rows, err := q.db.QueryContext(ctx, getDocumentsBySalesman, vendedor)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ClossDocument
	for rows.Next() {
		var i ClossDocument
		if err := rows.Scan(
			&i.Agencia,
			&i.Tipodoc,
			&i.Documento,
			&i.Tipodocv,
			&i.Codcliente,
			&i.Nombrecli,
			&i.Contribesp,
			&i.RutaParme,
			&i.Tipoprecio,
			&i.Emision,
			&i.Recepcion,
			&i.Vence,
			&i.Diascred,
			&i.Estatusdoc,
			&i.Dtotneto,
			&i.Dtotimpuest,
			&i.Dtotalfinal,
			&i.Dtotpagos,
			&i.Dtotdescuen,
			&i.Dflete,
			&i.Dtotdev,
			&i.Dvndmtototal,
			&i.Dretencion,
			&i.Dretencioniva,
			&i.Vendedor,
			&i.Codcoord,
			&i.Aceptadev,
			&i.KtiNegesp,
			&i.Bsiva,
			&i.Bsflete,
			&i.Bsretencion,
			&i.Bsretencioniva,
			&i.Tasadoc,
			&i.Mtodcto,
			&i.Fchvencedcto,
			&i.Tienedcto,
			&i.Cbsret,
			&i.Cdret,
			&i.Cbsretiva,
			&i.Cdretiva,
			&i.Cbsrparme,
			&i.Cdrparme,
			&i.Cbsretflete,
			&i.Cdretflete,
			&i.Bsmtoiva,
			&i.Bsmtofte,
			&i.RetmunMto,
			&i.Dolarflete,
			&i.Bsretflete,
			&i.Dretflete,
			&i.DretmunMto,
			&i.Retivaoblig,
			&i.Edoentrega,
			&i.Dmtoiva,
			&i.Prcdctoaplic,
			&i.Montodctodol,
			&i.Montodctobs,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDocumentsWithLines = `-- name: GetDocumentsWithLines :many
;

select closs_document.agencia, closs_document.tipodoc, closs_document.documento, closs_document.tipodocv, codcliente, nombrecli, contribesp, ruta_parme, tipoprecio, emision, recepcion, vence, diascred, estatusdoc, dtotneto, dtotimpuest, dtotalfinal, dtotpagos, dtotdescuen, dflete, dtotdev, closs_document.dvndmtototal, dretencion, dretencioniva, closs_document.vendedor, closs_document.codcoord, aceptadev, kti_negesp, bsiva, bsflete, bsretencion, bsretencioniva, tasadoc, mtodcto, fchvencedcto, tienedcto, cbsret, cdret, cbsretiva, cdretiva, cbsrparme, cdrparme, cbsretflete, cdretflete, bsmtoiva, bsmtofte, retmun_mto, dolarflete, bsretflete, dretflete, dretmun_mto, retivaoblig, edoentrega, dmtoiva, prcdctoaplic, montodctodol, montodctobs, created_at, updated_at, closs_document_lines.agencia, closs_document_lines.tipodoc, closs_document_lines.documento, closs_document_lines.tipodocv, grupo, subgrupo, origen, codigo, codhijo, pid, nombre, cantidad, cntdevuelt, vndcntdevuelt, closs_document_lines.dvndmtototal, dpreciofin, dpreciounit, dmontoneto, dmontototal, timpueprc, unidevuelt, fechadoc, closs_document_lines.vendedor, closs_document_lines.codcoord
from closs_document
left join
    closs_document_lines on closs_document.documento = closs_document_lines.documento
`

type GetDocumentsWithLinesRow struct {
	Agencia        string
	Tipodoc        string
	Documento      string
	Tipodocv       string
	Codcliente     string
	Nombrecli      string
	Contribesp     int64
	RutaParme      int64
	Tipoprecio     int64
	Emision        string
	Recepcion      string
	Vence          string
	Diascred       int64
	Estatusdoc     int64
	Dtotneto       float64
	Dtotimpuest    float64
	Dtotalfinal    float64
	Dtotpagos      float64
	Dtotdescuen    float64
	Dflete         float64
	Dtotdev        float64
	Dvndmtototal   float64
	Dretencion     float64
	Dretencioniva  float64
	Vendedor       string
	Codcoord       string
	Aceptadev      int64
	KtiNegesp      int64
	Bsiva          float64
	Bsflete        float64
	Bsretencion    float64
	Bsretencioniva float64
	Tasadoc        float64
	Mtodcto        float64
	Fchvencedcto   string
	Tienedcto      int64
	Cbsret         float64
	Cdret          float64
	Cbsretiva      float64
	Cdretiva       float64
	Cbsrparme      float64
	Cdrparme       float64
	Cbsretflete    float64
	Cdretflete     float64
	Bsmtoiva       float64
	Bsmtofte       float64
	RetmunMto      float64
	Dolarflete     int64
	Bsretflete     float64
	Dretflete      float64
	DretmunMto     float64
	Retivaoblig    int64
	Edoentrega     int64
	Dmtoiva        float64
	Prcdctoaplic   float64
	Montodctodol   float64
	Montodctobs    float64
	CreatedAt      string
	UpdatedAt      string
	Agencia_2      sql.NullString
	Tipodoc_2      sql.NullString
	Documento_2    sql.NullString
	Tipodocv_2     sql.NullString
	Grupo          sql.NullString
	Subgrupo       sql.NullString
	Origen         sql.NullInt64
	Codigo         sql.NullString
	Codhijo        sql.NullString
	Pid            sql.NullString
	Nombre         sql.NullString
	Cantidad       sql.NullInt64
	Cntdevuelt     sql.NullInt64
	Vndcntdevuelt  sql.NullInt64
	Dvndmtototal_2 sql.NullFloat64
	Dpreciofin     sql.NullFloat64
	Dpreciounit    sql.NullFloat64
	Dmontoneto     sql.NullFloat64
	Dmontototal    sql.NullFloat64
	Timpueprc      sql.NullFloat64
	Unidevuelt     sql.NullInt64
	Fechadoc       sql.NullString
	Vendedor_2     sql.NullString
	Codcoord_2     sql.NullString
}

func (q *Queries) GetDocumentsWithLines(ctx context.Context) ([]GetDocumentsWithLinesRow, error) {
	rows, err := q.db.QueryContext(ctx, getDocumentsWithLines)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetDocumentsWithLinesRow
	for rows.Next() {
		var i GetDocumentsWithLinesRow
		if err := rows.Scan(
			&i.Agencia,
			&i.Tipodoc,
			&i.Documento,
			&i.Tipodocv,
			&i.Codcliente,
			&i.Nombrecli,
			&i.Contribesp,
			&i.RutaParme,
			&i.Tipoprecio,
			&i.Emision,
			&i.Recepcion,
			&i.Vence,
			&i.Diascred,
			&i.Estatusdoc,
			&i.Dtotneto,
			&i.Dtotimpuest,
			&i.Dtotalfinal,
			&i.Dtotpagos,
			&i.Dtotdescuen,
			&i.Dflete,
			&i.Dtotdev,
			&i.Dvndmtototal,
			&i.Dretencion,
			&i.Dretencioniva,
			&i.Vendedor,
			&i.Codcoord,
			&i.Aceptadev,
			&i.KtiNegesp,
			&i.Bsiva,
			&i.Bsflete,
			&i.Bsretencion,
			&i.Bsretencioniva,
			&i.Tasadoc,
			&i.Mtodcto,
			&i.Fchvencedcto,
			&i.Tienedcto,
			&i.Cbsret,
			&i.Cdret,
			&i.Cbsretiva,
			&i.Cdretiva,
			&i.Cbsrparme,
			&i.Cdrparme,
			&i.Cbsretflete,
			&i.Cdretflete,
			&i.Bsmtoiva,
			&i.Bsmtofte,
			&i.RetmunMto,
			&i.Dolarflete,
			&i.Bsretflete,
			&i.Dretflete,
			&i.DretmunMto,
			&i.Retivaoblig,
			&i.Edoentrega,
			&i.Dmtoiva,
			&i.Prcdctoaplic,
			&i.Montodctodol,
			&i.Montodctobs,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Agencia_2,
			&i.Tipodoc_2,
			&i.Documento_2,
			&i.Tipodocv_2,
			&i.Grupo,
			&i.Subgrupo,
			&i.Origen,
			&i.Codigo,
			&i.Codhijo,
			&i.Pid,
			&i.Nombre,
			&i.Cantidad,
			&i.Cntdevuelt,
			&i.Vndcntdevuelt,
			&i.Dvndmtototal_2,
			&i.Dpreciofin,
			&i.Dpreciounit,
			&i.Dmontoneto,
			&i.Dmontototal,
			&i.Timpueprc,
			&i.Unidevuelt,
			&i.Fechadoc,
			&i.Vendedor_2,
			&i.Codcoord_2,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateDocument = `-- name: UpdateDocument :one
update closs_document set 
    agencia = ?,
    tipodoc = ?,
    tipodocv = ?,
    codcliente = ?,
    nombrecli = ?,
    contribesp = ?,
    ruta_parme = ?,
    tipoprecio = ?,
    emision = ?,
    recepcion = ?,
    vence = ?,
    diascred = ?,
    estatusdoc = ?,
    dtotneto = ?,
    dtotimpuest = ?,
    dtotalfinal = ?,
    dtotpagos = ?,
    dtotdescuen = ?,
    dFlete = ?,
    dtotdev = ?,
    dvndmtototal = ?,
    dretencion = ?,
    dretencioniva = ?,
    vendedor = ?,
    codcoord = ?,
    aceptadev = ?,
    kti_negesp = ?,
    bsiva = ?,
    bsflete = ?,
    bsretencion = ?,
    bsretencioniva = ?,
    tasadoc = ?,
    mtodcto = ?,
    fchvencedcto = ?,
    tienedcto = ?,
    cbsret = ?,
    cdret = ?,
    cbsretiva = ?,
    cdretiva = ?,
    cbsrparme = ?,
    cdrparme = ?,
    cbsretflete = ?,
    cdretflete = ?,
    bsmtoiva = ?,
    bsmtofte = ?,
    retmun_mto = ?,
    dolarflete = ?,
    bsretflete = ?,
    dretflete = ?,
    dretmun_mto = ?,
    retivaoblig = ?,
    edoentrega = ?,
    dmtoiva = ?,
    prcdctoaplic = ?,
    montodctodol = ?,
    montodctobs = ?,
    updated_at = ?
WHERE documento = ?
RETURNING agencia, tipodoc, documento, tipodocv, codcliente, nombrecli, contribesp, ruta_parme, tipoprecio, emision, recepcion, vence, diascred, estatusdoc, dtotneto, dtotimpuest, dtotalfinal, dtotpagos, dtotdescuen, dflete, dtotdev, dvndmtototal, dretencion, dretencioniva, vendedor, codcoord, aceptadev, kti_negesp, bsiva, bsflete, bsretencion, bsretencioniva, tasadoc, mtodcto, fchvencedcto, tienedcto, cbsret, cdret, cbsretiva, cdretiva, cbsrparme, cdrparme, cbsretflete, cdretflete, bsmtoiva, bsmtofte, retmun_mto, dolarflete, bsretflete, dretflete, dretmun_mto, retivaoblig, edoentrega, dmtoiva, prcdctoaplic, montodctodol, montodctobs, created_at, updated_at
`

type UpdateDocumentParams struct {
	Agencia        string
	Tipodoc        string
	Tipodocv       string
	Codcliente     string
	Nombrecli      string
	Contribesp     int64
	RutaParme      int64
	Tipoprecio     int64
	Emision        string
	Recepcion      string
	Vence          string
	Diascred       int64
	Estatusdoc     int64
	Dtotneto       float64
	Dtotimpuest    float64
	Dtotalfinal    float64
	Dtotpagos      float64
	Dtotdescuen    float64
	Dflete         float64
	Dtotdev        float64
	Dvndmtototal   float64
	Dretencion     float64
	Dretencioniva  float64
	Vendedor       string
	Codcoord       string
	Aceptadev      int64
	KtiNegesp      int64
	Bsiva          float64
	Bsflete        float64
	Bsretencion    float64
	Bsretencioniva float64
	Tasadoc        float64
	Mtodcto        float64
	Fchvencedcto   string
	Tienedcto      int64
	Cbsret         float64
	Cdret          float64
	Cbsretiva      float64
	Cdretiva       float64
	Cbsrparme      float64
	Cdrparme       float64
	Cbsretflete    float64
	Cdretflete     float64
	Bsmtoiva       float64
	Bsmtofte       float64
	RetmunMto      float64
	Dolarflete     int64
	Bsretflete     float64
	Dretflete      float64
	DretmunMto     float64
	Retivaoblig    int64
	Edoentrega     int64
	Dmtoiva        float64
	Prcdctoaplic   float64
	Montodctodol   float64
	Montodctobs    float64
	UpdatedAt      string
	Documento      string
}

func (q *Queries) UpdateDocument(ctx context.Context, arg UpdateDocumentParams) (ClossDocument, error) {
	row := q.db.QueryRowContext(ctx, updateDocument,
		arg.Agencia,
		arg.Tipodoc,
		arg.Tipodocv,
		arg.Codcliente,
		arg.Nombrecli,
		arg.Contribesp,
		arg.RutaParme,
		arg.Tipoprecio,
		arg.Emision,
		arg.Recepcion,
		arg.Vence,
		arg.Diascred,
		arg.Estatusdoc,
		arg.Dtotneto,
		arg.Dtotimpuest,
		arg.Dtotalfinal,
		arg.Dtotpagos,
		arg.Dtotdescuen,
		arg.Dflete,
		arg.Dtotdev,
		arg.Dvndmtototal,
		arg.Dretencion,
		arg.Dretencioniva,
		arg.Vendedor,
		arg.Codcoord,
		arg.Aceptadev,
		arg.KtiNegesp,
		arg.Bsiva,
		arg.Bsflete,
		arg.Bsretencion,
		arg.Bsretencioniva,
		arg.Tasadoc,
		arg.Mtodcto,
		arg.Fchvencedcto,
		arg.Tienedcto,
		arg.Cbsret,
		arg.Cdret,
		arg.Cbsretiva,
		arg.Cdretiva,
		arg.Cbsrparme,
		arg.Cdrparme,
		arg.Cbsretflete,
		arg.Cdretflete,
		arg.Bsmtoiva,
		arg.Bsmtofte,
		arg.RetmunMto,
		arg.Dolarflete,
		arg.Bsretflete,
		arg.Dretflete,
		arg.DretmunMto,
		arg.Retivaoblig,
		arg.Edoentrega,
		arg.Dmtoiva,
		arg.Prcdctoaplic,
		arg.Montodctodol,
		arg.Montodctobs,
		arg.UpdatedAt,
		arg.Documento,
	)
	var i ClossDocument
	err := row.Scan(
		&i.Agencia,
		&i.Tipodoc,
		&i.Documento,
		&i.Tipodocv,
		&i.Codcliente,
		&i.Nombrecli,
		&i.Contribesp,
		&i.RutaParme,
		&i.Tipoprecio,
		&i.Emision,
		&i.Recepcion,
		&i.Vence,
		&i.Diascred,
		&i.Estatusdoc,
		&i.Dtotneto,
		&i.Dtotimpuest,
		&i.Dtotalfinal,
		&i.Dtotpagos,
		&i.Dtotdescuen,
		&i.Dflete,
		&i.Dtotdev,
		&i.Dvndmtototal,
		&i.Dretencion,
		&i.Dretencioniva,
		&i.Vendedor,
		&i.Codcoord,
		&i.Aceptadev,
		&i.KtiNegesp,
		&i.Bsiva,
		&i.Bsflete,
		&i.Bsretencion,
		&i.Bsretencioniva,
		&i.Tasadoc,
		&i.Mtodcto,
		&i.Fchvencedcto,
		&i.Tienedcto,
		&i.Cbsret,
		&i.Cdret,
		&i.Cbsretiva,
		&i.Cdretiva,
		&i.Cbsrparme,
		&i.Cdrparme,
		&i.Cbsretflete,
		&i.Cdretflete,
		&i.Bsmtoiva,
		&i.Bsmtofte,
		&i.RetmunMto,
		&i.Dolarflete,
		&i.Bsretflete,
		&i.Dretflete,
		&i.DretmunMto,
		&i.Retivaoblig,
		&i.Edoentrega,
		&i.Dmtoiva,
		&i.Prcdctoaplic,
		&i.Montodctodol,
		&i.Montodctobs,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
