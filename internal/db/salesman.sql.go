// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: salesman.sql

package db

import (
	"context"
	"database/sql"
)

const createSalesman = `-- name: CreateSalesman :one
;

insert into closs_salesman (
    codigo,
    nombre,
    telefono,
    telefonos,
    status,
    supervpor,
    sector,
    subcodigo,
    email,
    nivgcial,
    created_at,
    updated_at
)
values (
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?
)
RETURNING codigo, nombre, email, telefono, telefonos, status, supervpor, sector, subcodigo, nivgcial, created_at, updated_at
`

type CreateSalesmanParams struct {
	Codigo    string
	Nombre    string
	Telefono  string
	Telefonos string
	Status    int64
	Supervpor string
	Sector    string
	Subcodigo string
	Email     string
	Nivgcial  int64
	CreatedAt string
	UpdatedAt string
}

func (q *Queries) CreateSalesman(ctx context.Context, arg CreateSalesmanParams) (ClossSalesman, error) {
	row := q.db.QueryRowContext(ctx, createSalesman,
		arg.Codigo,
		arg.Nombre,
		arg.Telefono,
		arg.Telefonos,
		arg.Status,
		arg.Supervpor,
		arg.Sector,
		arg.Subcodigo,
		arg.Email,
		arg.Nivgcial,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i ClossSalesman
	err := row.Scan(
		&i.Codigo,
		&i.Nombre,
		&i.Email,
		&i.Telefono,
		&i.Telefonos,
		&i.Status,
		&i.Supervpor,
		&i.Sector,
		&i.Subcodigo,
		&i.Nivgcial,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getExistingSalesmanByCode = `-- name: GetExistingSalesmanByCode :one
;

select
    closs_salesman.codigo,
    closs_user.username,
    closs_salesman.nombre,
    closs_salesman.email,
    closs_salesman.telefono,
    closs_salesman.telefonos,
    closs_salesman.supervpor,
    closs_sector.zona as sector,
    closs_subsector.subsector as subsector,
    closs_user.ult_sinc,
    closs_user.version,
    closs_salesman.created_at,
    closs_salesman.updated_at
from closs_salesman
left join closs_sector on closs_sector.codigo = closs_salesman.sector
left join closs_subsector on closs_subsector.subcodigo = closs_salesman.subcodigo
left join closs_user on closs_salesman.codigo = closs_user.codigo
where closs_salesman.codigo = ? and closs_salesman.status = 1
`

type GetExistingSalesmanByCodeRow struct {
	Codigo    string
	Username  sql.NullString
	Nombre    string
	Email     string
	Telefono  string
	Telefonos string
	Supervpor string
	Sector    sql.NullString
	Subsector sql.NullString
	UltSinc   sql.NullString
	Version   sql.NullString
	CreatedAt string
	UpdatedAt string
}

func (q *Queries) GetExistingSalesmanByCode(ctx context.Context, codigo string) (GetExistingSalesmanByCodeRow, error) {
	row := q.db.QueryRowContext(ctx, getExistingSalesmanByCode, codigo)
	var i GetExistingSalesmanByCodeRow
	err := row.Scan(
		&i.Codigo,
		&i.Username,
		&i.Nombre,
		&i.Email,
		&i.Telefono,
		&i.Telefonos,
		&i.Supervpor,
		&i.Sector,
		&i.Subsector,
		&i.UltSinc,
		&i.Version,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getExistingSalesmenByManager = `-- name: GetExistingSalesmenByManager :many
;

select
    closs_salesman.codigo,
    closs_user.username,
    closs_salesman.nombre,
    closs_salesman.email,
    closs_salesman.telefono,
    closs_salesman.telefonos,
    closs_salesman.supervpor,
    closs_sector.zona as sector,
    closs_subsector.subsector as subsector,
    closs_user.ult_sinc,
    closs_user.version,
    closs_salesman.created_at,
    closs_salesman.updated_at
from closs_salesman
left join closs_sector on closs_sector.codigo = closs_salesman.sector
left join closs_subsector on closs_subsector.subcodigo = closs_salesman.subcodigo
left join closs_user on closs_salesman.codigo = closs_user.codigo
left join closs_managers on closs_salesman.supervpor = closs_managers.kng_codcoord
where closs_salesman.status = 1 and closs_managers.kng_codgcia = ?
group by closs_salesman.codigo
`

type GetExistingSalesmenByManagerRow struct {
	Codigo    string
	Username  sql.NullString
	Nombre    string
	Email     string
	Telefono  string
	Telefonos string
	Supervpor string
	Sector    sql.NullString
	Subsector sql.NullString
	UltSinc   sql.NullString
	Version   sql.NullString
	CreatedAt string
	UpdatedAt string
}

func (q *Queries) GetExistingSalesmenByManager(ctx context.Context, kngCodgcia string) ([]GetExistingSalesmenByManagerRow, error) {
	rows, err := q.db.QueryContext(ctx, getExistingSalesmenByManager, kngCodgcia)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetExistingSalesmenByManagerRow
	for rows.Next() {
		var i GetExistingSalesmenByManagerRow
		if err := rows.Scan(
			&i.Codigo,
			&i.Username,
			&i.Nombre,
			&i.Email,
			&i.Telefono,
			&i.Telefonos,
			&i.Supervpor,
			&i.Sector,
			&i.Subsector,
			&i.UltSinc,
			&i.Version,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSalesmanByCode = `-- name: GetSalesmanByCode :one
;

select
    closs_salesman.codigo,
    closs_user.username,
    closs_salesman.nombre,
    closs_salesman.email,
    closs_salesman.telefono,
    closs_salesman.telefonos,
    closs_salesman.supervpor,
    closs_sector.zona as sector,
    closs_subsector.subsector as subsector,
    closs_user.ult_sinc,
    closs_user.version,
    closs_salesman.created_at,
    closs_salesman.updated_at
from closs_salesman
left join closs_sector on closs_sector.codigo = closs_salesman.sector
left join closs_subsector on closs_subsector.subcodigo = closs_salesman.subcodigo
left join closs_user on closs_salesman.codigo = closs_user.codigo
where closs_salesman.codigo = ?
`

type GetSalesmanByCodeRow struct {
	Codigo    string
	Username  sql.NullString
	Nombre    string
	Email     string
	Telefono  string
	Telefonos string
	Supervpor string
	Sector    sql.NullString
	Subsector sql.NullString
	UltSinc   sql.NullString
	Version   sql.NullString
	CreatedAt string
	UpdatedAt string
}

func (q *Queries) GetSalesmanByCode(ctx context.Context, codigo string) (GetSalesmanByCodeRow, error) {
	row := q.db.QueryRowContext(ctx, getSalesmanByCode, codigo)
	var i GetSalesmanByCodeRow
	err := row.Scan(
		&i.Codigo,
		&i.Username,
		&i.Nombre,
		&i.Email,
		&i.Telefono,
		&i.Telefonos,
		&i.Supervpor,
		&i.Sector,
		&i.Subsector,
		&i.UltSinc,
		&i.Version,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getSalesmenByManager = `-- name: GetSalesmenByManager :many
select
    closs_salesman.codigo,
    closs_user.username,
    closs_salesman.nombre,
    closs_salesman.email,
    closs_salesman.telefono,
    closs_salesman.telefonos,
    closs_salesman.supervpor,
    closs_sector.zona as sector,
    closs_subsector.subsector as subsector,
    closs_user.ult_sinc,
    closs_user.version,
    closs_salesman.created_at,
    closs_salesman.updated_at
from closs_salesman
left join closs_sector on closs_sector.codigo = closs_salesman.sector
left join closs_subsector on closs_subsector.subcodigo = closs_salesman.subcodigo
left join closs_user on closs_salesman.codigo = closs_user.codigo
left join closs_managers on closs_salesman.supervpor = closs_managers.kng_codcoord
where closs_managers.kng_codgcia = ?
group by closs_salesman.codigo
`

type GetSalesmenByManagerRow struct {
	Codigo    string
	Username  sql.NullString
	Nombre    string
	Email     string
	Telefono  string
	Telefonos string
	Supervpor string
	Sector    sql.NullString
	Subsector sql.NullString
	UltSinc   sql.NullString
	Version   sql.NullString
	CreatedAt string
	UpdatedAt string
}

func (q *Queries) GetSalesmenByManager(ctx context.Context, kngCodgcia string) ([]GetSalesmenByManagerRow, error) {
	rows, err := q.db.QueryContext(ctx, getSalesmenByManager, kngCodgcia)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetSalesmenByManagerRow
	for rows.Next() {
		var i GetSalesmenByManagerRow
		if err := rows.Scan(
			&i.Codigo,
			&i.Username,
			&i.Nombre,
			&i.Email,
			&i.Telefono,
			&i.Telefonos,
			&i.Supervpor,
			&i.Sector,
			&i.Subsector,
			&i.UltSinc,
			&i.Version,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSalesman = `-- name: UpdateSalesman :one
update closs_salesman set 
    nombre = ?,
    telefono = ?,
    telefonos = ?,
    supervpor = ?,
    sector = ?,
    subcodigo = ?,
    email = ?,
    updated_at = ?
where codigo = ?
RETURNING codigo, nombre, email, telefono, telefonos, status, supervpor, sector, subcodigo, nivgcial, created_at, updated_at
`

type UpdateSalesmanParams struct {
	Nombre    string
	Telefono  string
	Telefonos string
	Supervpor string
	Sector    string
	Subcodigo string
	Email     string
	UpdatedAt string
	Codigo    string
}

func (q *Queries) UpdateSalesman(ctx context.Context, arg UpdateSalesmanParams) (ClossSalesman, error) {
	row := q.db.QueryRowContext(ctx, updateSalesman,
		arg.Nombre,
		arg.Telefono,
		arg.Telefonos,
		arg.Supervpor,
		arg.Sector,
		arg.Subcodigo,
		arg.Email,
		arg.UpdatedAt,
		arg.Codigo,
	)
	var i ClossSalesman
	err := row.Scan(
		&i.Codigo,
		&i.Nombre,
		&i.Email,
		&i.Telefono,
		&i.Telefonos,
		&i.Status,
		&i.Supervpor,
		&i.Sector,
		&i.Subcodigo,
		&i.Nivgcial,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
