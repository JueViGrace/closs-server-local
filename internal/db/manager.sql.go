// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: manager.sql

package db

import (
	"context"
)

const createManager = `-- name: CreateManager :one
;

INSERT OR REPLACE INTO closs_managers(
    kng_codgcia,
    kng_codcoord
)
VALUES (?, ?)
RETURNING kng_codgcia, kng_codcoord, created_at, updated_at, deleted_at
`

type CreateManagerParams struct {
	KngCodgcia  string
	KngCodcoord string
}

func (q *Queries) CreateManager(ctx context.Context, arg CreateManagerParams) (ClossManager, error) {
	row := q.db.QueryRowContext(ctx, createManager, arg.KngCodgcia, arg.KngCodcoord)
	var i ClossManager
	err := row.Scan(
		&i.KngCodgcia,
		&i.KngCodcoord,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getManagerByCode = `-- name: GetManagerByCode :one
;

select kng_codgcia, kng_codcoord, created_at, updated_at, deleted_at
from closs_managers
where kng_codgcia = ? and kng_codcoord = ?
`

type GetManagerByCodeParams struct {
	KngCodgcia  string
	KngCodcoord string
}

func (q *Queries) GetManagerByCode(ctx context.Context, arg GetManagerByCodeParams) (ClossManager, error) {
	row := q.db.QueryRowContext(ctx, getManagerByCode, arg.KngCodgcia, arg.KngCodcoord)
	var i ClossManager
	err := row.Scan(
		&i.KngCodgcia,
		&i.KngCodcoord,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getManagersByCode = `-- name: GetManagersByCode :many
select kng_codgcia, kng_codcoord, created_at, updated_at, deleted_at
from closs_managers
where kng_codgcia = ?
`

func (q *Queries) GetManagersByCode(ctx context.Context, kngCodgcia string) ([]ClossManager, error) {
	rows, err := q.db.QueryContext(ctx, getManagersByCode, kngCodgcia)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ClossManager
	for rows.Next() {
		var i ClossManager
		if err := rows.Scan(
			&i.KngCodgcia,
			&i.KngCodcoord,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
