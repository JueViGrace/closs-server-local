// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: salesman_statistics.sql

package db

import (
	"context"
)

const createStatistic = `-- name: CreateStatistic :one
;

insert into closs_salesman_statistic(
    codcoord,
    nomcoord,
    vendedor,
    nombrevend,
    cntpedidos,
    mtopedidos,
    cntfacturas,
    mtofacturas,
    metavend,
    prcmeta,
    cntclientes,
    clivisit,
    prcvisitas,
    lom_montovtas,
    lom_prcvtas,
    lom_prcvisit,
    rlom_montovtas,
    rlom_prcvtas,
    rlom_prcvisit,
    fecha_estad,
    ppgdol_totneto,
    devdol_totneto,
    defdol_totneto,
    totdolcob,
    cntrecl,
    mtorecl,
    created_at,
    updated_at
)
values (
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?
)
RETURNING codcoord, nomcoord, vendedor, nombrevend, cntpedidos, mtopedidos, cntfacturas, mtofacturas, metavend, prcmeta, cntclientes, clivisit, prcvisitas, lom_montovtas, lom_prcvtas, lom_prcvisit, rlom_montovtas, rlom_prcvtas, rlom_prcvisit, fecha_estad, ppgdol_totneto, devdol_totneto, defdol_totneto, totdolcob, cntrecl, mtorecl, created_at, updated_at
`

type CreateStatisticParams struct {
	Codcoord      string
	Nomcoord      string
	Vendedor      string
	Nombrevend    string
	Cntpedidos    int64
	Mtopedidos    float64
	Cntfacturas   int64
	Mtofacturas   float64
	Metavend      float64
	Prcmeta       float64
	Cntclientes   int64
	Clivisit      int64
	Prcvisitas    float64
	LomMontovtas  float64
	LomPrcvtas    float64
	LomPrcvisit   float64
	RlomMontovtas float64
	RlomPrcvtas   float64
	RlomPrcvisit  float64
	FechaEstad    string
	PpgdolTotneto float64
	DevdolTotneto float64
	DefdolTotneto float64
	Totdolcob     float64
	Cntrecl       int64
	Mtorecl       float64
	CreatedAt     string
	UpdatedAt     string
}

func (q *Queries) CreateStatistic(ctx context.Context, arg CreateStatisticParams) (ClossSalesmanStatistic, error) {
	row := q.db.QueryRowContext(ctx, createStatistic,
		arg.Codcoord,
		arg.Nomcoord,
		arg.Vendedor,
		arg.Nombrevend,
		arg.Cntpedidos,
		arg.Mtopedidos,
		arg.Cntfacturas,
		arg.Mtofacturas,
		arg.Metavend,
		arg.Prcmeta,
		arg.Cntclientes,
		arg.Clivisit,
		arg.Prcvisitas,
		arg.LomMontovtas,
		arg.LomPrcvtas,
		arg.LomPrcvisit,
		arg.RlomMontovtas,
		arg.RlomPrcvtas,
		arg.RlomPrcvisit,
		arg.FechaEstad,
		arg.PpgdolTotneto,
		arg.DevdolTotneto,
		arg.DefdolTotneto,
		arg.Totdolcob,
		arg.Cntrecl,
		arg.Mtorecl,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i ClossSalesmanStatistic
	err := row.Scan(
		&i.Codcoord,
		&i.Nomcoord,
		&i.Vendedor,
		&i.Nombrevend,
		&i.Cntpedidos,
		&i.Mtopedidos,
		&i.Cntfacturas,
		&i.Mtofacturas,
		&i.Metavend,
		&i.Prcmeta,
		&i.Cntclientes,
		&i.Clivisit,
		&i.Prcvisitas,
		&i.LomMontovtas,
		&i.LomPrcvtas,
		&i.LomPrcvisit,
		&i.RlomMontovtas,
		&i.RlomPrcvtas,
		&i.RlomPrcvisit,
		&i.FechaEstad,
		&i.PpgdolTotneto,
		&i.DevdolTotneto,
		&i.DefdolTotneto,
		&i.Totdolcob,
		&i.Cntrecl,
		&i.Mtorecl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getStatisticBySalesman = `-- name: GetStatisticBySalesman :one
;

select codcoord, nomcoord, vendedor, nombrevend, cntpedidos, mtopedidos, cntfacturas, mtofacturas, metavend, prcmeta, cntclientes, clivisit, prcvisitas, lom_montovtas, lom_prcvtas, lom_prcvisit, rlom_montovtas, rlom_prcvtas, rlom_prcvisit, fecha_estad, ppgdol_totneto, devdol_totneto, defdol_totneto, totdolcob, cntrecl, mtorecl, created_at, updated_at
from closs_salesman_statistic
where vendedor = ?
`

func (q *Queries) GetStatisticBySalesman(ctx context.Context, vendedor string) (ClossSalesmanStatistic, error) {
	row := q.db.QueryRowContext(ctx, getStatisticBySalesman, vendedor)
	var i ClossSalesmanStatistic
	err := row.Scan(
		&i.Codcoord,
		&i.Nomcoord,
		&i.Vendedor,
		&i.Nombrevend,
		&i.Cntpedidos,
		&i.Mtopedidos,
		&i.Cntfacturas,
		&i.Mtofacturas,
		&i.Metavend,
		&i.Prcmeta,
		&i.Cntclientes,
		&i.Clivisit,
		&i.Prcvisitas,
		&i.LomMontovtas,
		&i.LomPrcvtas,
		&i.LomPrcvisit,
		&i.RlomMontovtas,
		&i.RlomPrcvtas,
		&i.RlomPrcvisit,
		&i.FechaEstad,
		&i.PpgdolTotneto,
		&i.DevdolTotneto,
		&i.DefdolTotneto,
		&i.Totdolcob,
		&i.Cntrecl,
		&i.Mtorecl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getStatistics = `-- name: GetStatistics :many
select codcoord, nomcoord, vendedor, nombrevend, cntpedidos, mtopedidos, cntfacturas, mtofacturas, metavend, prcmeta, cntclientes, clivisit, prcvisitas, lom_montovtas, lom_prcvtas, lom_prcvisit, rlom_montovtas, rlom_prcvtas, rlom_prcvisit, fecha_estad, ppgdol_totneto, devdol_totneto, defdol_totneto, totdolcob, cntrecl, mtorecl, created_at, updated_at
from closs_salesman_statistic
`

func (q *Queries) GetStatistics(ctx context.Context) ([]ClossSalesmanStatistic, error) {
	rows, err := q.db.QueryContext(ctx, getStatistics)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ClossSalesmanStatistic
	for rows.Next() {
		var i ClossSalesmanStatistic
		if err := rows.Scan(
			&i.Codcoord,
			&i.Nomcoord,
			&i.Vendedor,
			&i.Nombrevend,
			&i.Cntpedidos,
			&i.Mtopedidos,
			&i.Cntfacturas,
			&i.Mtofacturas,
			&i.Metavend,
			&i.Prcmeta,
			&i.Cntclientes,
			&i.Clivisit,
			&i.Prcvisitas,
			&i.LomMontovtas,
			&i.LomPrcvtas,
			&i.LomPrcvisit,
			&i.RlomMontovtas,
			&i.RlomPrcvtas,
			&i.RlomPrcvisit,
			&i.FechaEstad,
			&i.PpgdolTotneto,
			&i.DevdolTotneto,
			&i.DefdolTotneto,
			&i.Totdolcob,
			&i.Cntrecl,
			&i.Mtorecl,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getStatisticsByManager = `-- name: GetStatisticsByManager :many
;

select closs_salesman_statistic.codcoord, closs_salesman_statistic.nomcoord, closs_salesman_statistic.vendedor, closs_salesman_statistic.nombrevend, closs_salesman_statistic.cntpedidos, closs_salesman_statistic.mtopedidos, closs_salesman_statistic.cntfacturas, closs_salesman_statistic.mtofacturas, closs_salesman_statistic.metavend, closs_salesman_statistic.prcmeta, closs_salesman_statistic.cntclientes, closs_salesman_statistic.clivisit, closs_salesman_statistic.prcvisitas, closs_salesman_statistic.lom_montovtas, closs_salesman_statistic.lom_prcvtas, closs_salesman_statistic.lom_prcvisit, closs_salesman_statistic.rlom_montovtas, closs_salesman_statistic.rlom_prcvtas, closs_salesman_statistic.rlom_prcvisit, closs_salesman_statistic.fecha_estad, closs_salesman_statistic.ppgdol_totneto, closs_salesman_statistic.devdol_totneto, closs_salesman_statistic.defdol_totneto, closs_salesman_statistic.totdolcob, closs_salesman_statistic.cntrecl, closs_salesman_statistic.mtorecl, closs_salesman_statistic.created_at, closs_salesman_statistic.updated_at
from closs_salesman_statistic
left join
    closs_managers on closs_salesman_statistic.codcoord = closs_managers.kng_codcoord
where closs_managers.kng_codgcia = ?
`

func (q *Queries) GetStatisticsByManager(ctx context.Context, kngCodgcia string) ([]ClossSalesmanStatistic, error) {
	rows, err := q.db.QueryContext(ctx, getStatisticsByManager, kngCodgcia)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ClossSalesmanStatistic
	for rows.Next() {
		var i ClossSalesmanStatistic
		if err := rows.Scan(
			&i.Codcoord,
			&i.Nomcoord,
			&i.Vendedor,
			&i.Nombrevend,
			&i.Cntpedidos,
			&i.Mtopedidos,
			&i.Cntfacturas,
			&i.Mtofacturas,
			&i.Metavend,
			&i.Prcmeta,
			&i.Cntclientes,
			&i.Clivisit,
			&i.Prcvisitas,
			&i.LomMontovtas,
			&i.LomPrcvtas,
			&i.LomPrcvisit,
			&i.RlomMontovtas,
			&i.RlomPrcvtas,
			&i.RlomPrcvisit,
			&i.FechaEstad,
			&i.PpgdolTotneto,
			&i.DevdolTotneto,
			&i.DefdolTotneto,
			&i.Totdolcob,
			&i.Cntrecl,
			&i.Mtorecl,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateStatistic = `-- name: UpdateStatistic :one
update closs_salesman_statistic set 
    codcoord = ?,
    nomcoord = ?,
    nombrevend = ?,
    cntpedidos = ?,
    mtopedidos = ?,
    cntfacturas = ?,
    mtofacturas = ?,
    metavend = ?,
    prcmeta = ?,
    cntclientes = ?,
    clivisit = ?,
    prcvisitas = ?,
    lom_montovtas = ?,
    lom_prcvtas = ?,
    lom_prcvisit = ?,
    rlom_montovtas = ?,
    rlom_prcvtas = ?,
    rlom_prcvisit = ?,
    fecha_estad = ?,
    ppgdol_totneto = ?,
    devdol_totneto = ?,
    defdol_totneto = ?,
    totdolcob = ?,
    cntrecl = ?,
    mtorecl = ?,
    updated_at = ?
where vendedor = ?
RETURNING codcoord, nomcoord, vendedor, nombrevend, cntpedidos, mtopedidos, cntfacturas, mtofacturas, metavend, prcmeta, cntclientes, clivisit, prcvisitas, lom_montovtas, lom_prcvtas, lom_prcvisit, rlom_montovtas, rlom_prcvtas, rlom_prcvisit, fecha_estad, ppgdol_totneto, devdol_totneto, defdol_totneto, totdolcob, cntrecl, mtorecl, created_at, updated_at
`

type UpdateStatisticParams struct {
	Codcoord      string
	Nomcoord      string
	Nombrevend    string
	Cntpedidos    int64
	Mtopedidos    float64
	Cntfacturas   int64
	Mtofacturas   float64
	Metavend      float64
	Prcmeta       float64
	Cntclientes   int64
	Clivisit      int64
	Prcvisitas    float64
	LomMontovtas  float64
	LomPrcvtas    float64
	LomPrcvisit   float64
	RlomMontovtas float64
	RlomPrcvtas   float64
	RlomPrcvisit  float64
	FechaEstad    string
	PpgdolTotneto float64
	DevdolTotneto float64
	DefdolTotneto float64
	Totdolcob     float64
	Cntrecl       int64
	Mtorecl       float64
	UpdatedAt     string
	Vendedor      string
}

func (q *Queries) UpdateStatistic(ctx context.Context, arg UpdateStatisticParams) (ClossSalesmanStatistic, error) {
	row := q.db.QueryRowContext(ctx, updateStatistic,
		arg.Codcoord,
		arg.Nomcoord,
		arg.Nombrevend,
		arg.Cntpedidos,
		arg.Mtopedidos,
		arg.Cntfacturas,
		arg.Mtofacturas,
		arg.Metavend,
		arg.Prcmeta,
		arg.Cntclientes,
		arg.Clivisit,
		arg.Prcvisitas,
		arg.LomMontovtas,
		arg.LomPrcvtas,
		arg.LomPrcvisit,
		arg.RlomMontovtas,
		arg.RlomPrcvtas,
		arg.RlomPrcvisit,
		arg.FechaEstad,
		arg.PpgdolTotneto,
		arg.DevdolTotneto,
		arg.DefdolTotneto,
		arg.Totdolcob,
		arg.Cntrecl,
		arg.Mtorecl,
		arg.UpdatedAt,
		arg.Vendedor,
	)
	var i ClossSalesmanStatistic
	err := row.Scan(
		&i.Codcoord,
		&i.Nomcoord,
		&i.Vendedor,
		&i.Nombrevend,
		&i.Cntpedidos,
		&i.Mtopedidos,
		&i.Cntfacturas,
		&i.Mtofacturas,
		&i.Metavend,
		&i.Prcmeta,
		&i.Cntclientes,
		&i.Clivisit,
		&i.Prcvisitas,
		&i.LomMontovtas,
		&i.LomPrcvtas,
		&i.LomPrcvisit,
		&i.RlomMontovtas,
		&i.RlomPrcvtas,
		&i.RlomPrcvisit,
		&i.FechaEstad,
		&i.PpgdolTotneto,
		&i.DevdolTotneto,
		&i.DefdolTotneto,
		&i.Totdolcob,
		&i.Cntrecl,
		&i.Mtorecl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
