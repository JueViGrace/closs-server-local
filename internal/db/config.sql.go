// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: config.sql

package db

import (
	"context"
)

const createConfig = `-- name: CreateConfig :one
;

INSERT INTO closs_config (
    cnfg_idconfig,
    cnfg_clase,
    cnfg_tipo,
    cnfg_valnum,
    cnfg_valsino,
    cnfg_valtxt,
    cnfg_lentxt,
    cnfg_valfch,
    cnfg_activa,
    cnfg_etiq,
    cnfg_ttip,
    username,
    created_at,
    updated_at
)
VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
RETURNING cnfg_idconfig, cnfg_clase, cnfg_tipo, cnfg_valnum, cnfg_valsino, cnfg_valtxt, cnfg_lentxt, cnfg_valfch, cnfg_activa, cnfg_etiq, cnfg_ttip, username, created_at, updated_at, deleted_at
`

type CreateConfigParams struct {
	CnfgIdconfig string
	CnfgClase    string
	CnfgTipo     string
	CnfgValnum   float64
	CnfgValsino  int64
	CnfgValtxt   string
	CnfgLentxt   int64
	CnfgValfch   string
	CnfgActiva   int64
	CnfgEtiq     string
	CnfgTtip     string
	Username     string
	CreatedAt    string
	UpdatedAt    string
}

func (q *Queries) CreateConfig(ctx context.Context, arg CreateConfigParams) (ClossConfig, error) {
	row := q.db.QueryRowContext(ctx, createConfig,
		arg.CnfgIdconfig,
		arg.CnfgClase,
		arg.CnfgTipo,
		arg.CnfgValnum,
		arg.CnfgValsino,
		arg.CnfgValtxt,
		arg.CnfgLentxt,
		arg.CnfgValfch,
		arg.CnfgActiva,
		arg.CnfgEtiq,
		arg.CnfgTtip,
		arg.Username,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i ClossConfig
	err := row.Scan(
		&i.CnfgIdconfig,
		&i.CnfgClase,
		&i.CnfgTipo,
		&i.CnfgValnum,
		&i.CnfgValsino,
		&i.CnfgValtxt,
		&i.CnfgLentxt,
		&i.CnfgValfch,
		&i.CnfgActiva,
		&i.CnfgEtiq,
		&i.CnfgTtip,
		&i.Username,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deleteConfig = `-- name: DeleteConfig :exec
delete from closs_config
where cnfg_idconfig = ? and username = ?
`

type DeleteConfigParams struct {
	CnfgIdconfig string
	Username     string
}

func (q *Queries) DeleteConfig(ctx context.Context, arg DeleteConfigParams) error {
	_, err := q.db.ExecContext(ctx, deleteConfig, arg.CnfgIdconfig, arg.Username)
	return err
}

const getConfigs = `-- name: GetConfigs :many
select cnfg_idconfig, cnfg_clase, cnfg_tipo, cnfg_valnum, cnfg_valsino, cnfg_valtxt, cnfg_lentxt, cnfg_valfch, cnfg_activa, cnfg_etiq, cnfg_ttip, username, created_at, updated_at, deleted_at
from closs_config
`

func (q *Queries) GetConfigs(ctx context.Context) ([]ClossConfig, error) {
	rows, err := q.db.QueryContext(ctx, getConfigs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ClossConfig
	for rows.Next() {
		var i ClossConfig
		if err := rows.Scan(
			&i.CnfgIdconfig,
			&i.CnfgClase,
			&i.CnfgTipo,
			&i.CnfgValnum,
			&i.CnfgValsino,
			&i.CnfgValtxt,
			&i.CnfgLentxt,
			&i.CnfgValfch,
			&i.CnfgActiva,
			&i.CnfgEtiq,
			&i.CnfgTtip,
			&i.Username,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getConfigsByUsername = `-- name: GetConfigsByUsername :many
;

select cnfg_idconfig, cnfg_clase, cnfg_tipo, cnfg_valnum, cnfg_valsino, cnfg_valtxt, cnfg_lentxt, cnfg_valfch, cnfg_activa, cnfg_etiq, cnfg_ttip, username, created_at, updated_at, deleted_at
from closs_config
where username = ?
`

func (q *Queries) GetConfigsByUsername(ctx context.Context, username string) ([]ClossConfig, error) {
	rows, err := q.db.QueryContext(ctx, getConfigsByUsername, username)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ClossConfig
	for rows.Next() {
		var i ClossConfig
		if err := rows.Scan(
			&i.CnfgIdconfig,
			&i.CnfgClase,
			&i.CnfgTipo,
			&i.CnfgValnum,
			&i.CnfgValsino,
			&i.CnfgValtxt,
			&i.CnfgLentxt,
			&i.CnfgValfch,
			&i.CnfgActiva,
			&i.CnfgEtiq,
			&i.CnfgTtip,
			&i.Username,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateConfig = `-- name: UpdateConfig :one
UPDATE closs_config SET 
    cnfg_clase = ?,
    cnfg_tipo = ?,
    cnfg_valnum = ?,
    cnfg_valsino = ?,
    cnfg_valtxt = ?,
    cnfg_lentxt = ?,
    cnfg_valfch = ?,
    cnfg_activa = ?,
    cnfg_etiq = ?,
    cnfg_ttip = ?,
    updated_at = ?
WHERE cnfg_idconfig = ? and username = ?
RETURNING cnfg_idconfig, cnfg_clase, cnfg_tipo, cnfg_valnum, cnfg_valsino, cnfg_valtxt, cnfg_lentxt, cnfg_valfch, cnfg_activa, cnfg_etiq, cnfg_ttip, username, created_at, updated_at, deleted_at
`

type UpdateConfigParams struct {
	CnfgClase    string
	CnfgTipo     string
	CnfgValnum   float64
	CnfgValsino  int64
	CnfgValtxt   string
	CnfgLentxt   int64
	CnfgValfch   string
	CnfgActiva   int64
	CnfgEtiq     string
	CnfgTtip     string
	UpdatedAt    string
	CnfgIdconfig string
	Username     string
}

func (q *Queries) UpdateConfig(ctx context.Context, arg UpdateConfigParams) (ClossConfig, error) {
	row := q.db.QueryRowContext(ctx, updateConfig,
		arg.CnfgClase,
		arg.CnfgTipo,
		arg.CnfgValnum,
		arg.CnfgValsino,
		arg.CnfgValtxt,
		arg.CnfgLentxt,
		arg.CnfgValfch,
		arg.CnfgActiva,
		arg.CnfgEtiq,
		arg.CnfgTtip,
		arg.UpdatedAt,
		arg.CnfgIdconfig,
		arg.Username,
	)
	var i ClossConfig
	err := row.Scan(
		&i.CnfgIdconfig,
		&i.CnfgClase,
		&i.CnfgTipo,
		&i.CnfgValnum,
		&i.CnfgValsino,
		&i.CnfgValtxt,
		&i.CnfgLentxt,
		&i.CnfgValfch,
		&i.CnfgActiva,
		&i.CnfgEtiq,
		&i.CnfgTtip,
		&i.Username,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
