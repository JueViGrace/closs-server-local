// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: order.sql

package db

import (
	"context"
	"database/sql"
)

const createOrder = `-- name: CreateOrder :one
;

insert into closs_order (
    kti_ndoc,
    kti_tdoc,
    kti_codcli,
    kti_nombrecli,
    kti_codven,
    kti_docsol,
    kti_condicion,
    kti_tipprec,
    kti_totneto,
    kti_status,
    kti_nroped,
    kti_fchdoc,
    kti_negesp,
    ke_pedstatus,
    dolarflete,
    complemento,
    nro_complemento,
    created_at,
    updated_at
)
values(
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?
)
RETURNING kti_ndoc, kti_tdoc, kti_codcli, kti_nombrecli, kti_codven, kti_docsol, kti_condicion, kti_tipprec, kti_totneto, kti_status, kti_nroped, kti_fchdoc, kti_negesp, ke_pedstatus, dolarflete, complemento, nro_complemento, created_at, updated_at
`

type CreateOrderParams struct {
	KtiNdoc        string
	KtiTdoc        string
	KtiCodcli      string
	KtiNombrecli   string
	KtiCodven      string
	KtiDocsol      string
	KtiCondicion   string
	KtiTipprec     int64
	KtiTotneto     float64
	KtiStatus      int64
	KtiNroped      string
	KtiFchdoc      string
	KtiNegesp      int64
	KePedstatus    int64
	Dolarflete     int64
	Complemento    int64
	NroComplemento string
	CreatedAt      string
	UpdatedAt      string
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) (ClossOrder, error) {
	row := q.db.QueryRowContext(ctx, createOrder,
		arg.KtiNdoc,
		arg.KtiTdoc,
		arg.KtiCodcli,
		arg.KtiNombrecli,
		arg.KtiCodven,
		arg.KtiDocsol,
		arg.KtiCondicion,
		arg.KtiTipprec,
		arg.KtiTotneto,
		arg.KtiStatus,
		arg.KtiNroped,
		arg.KtiFchdoc,
		arg.KtiNegesp,
		arg.KePedstatus,
		arg.Dolarflete,
		arg.Complemento,
		arg.NroComplemento,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i ClossOrder
	err := row.Scan(
		&i.KtiNdoc,
		&i.KtiTdoc,
		&i.KtiCodcli,
		&i.KtiNombrecli,
		&i.KtiCodven,
		&i.KtiDocsol,
		&i.KtiCondicion,
		&i.KtiTipprec,
		&i.KtiTotneto,
		&i.KtiStatus,
		&i.KtiNroped,
		&i.KtiFchdoc,
		&i.KtiNegesp,
		&i.KePedstatus,
		&i.Dolarflete,
		&i.Complemento,
		&i.NroComplemento,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAllOrdersByCustomer = `-- name: GetAllOrdersByCustomer :many
;

select closs_order.kti_ndoc, closs_order.kti_tdoc, closs_order.kti_codcli, closs_order.kti_nombrecli, closs_order.kti_codven, closs_order.kti_docsol, closs_order.kti_condicion, closs_order.kti_tipprec, closs_order.kti_totneto, closs_order.kti_status, closs_order.kti_nroped, closs_order.kti_fchdoc, closs_order.kti_negesp, closs_order.ke_pedstatus, closs_order.dolarflete, closs_order.complemento, closs_order.nro_complemento, closs_order.created_at, closs_order.updated_at
from closs_order
left join closs_customer on closs_order.kti_codcli = closs_customer.codigo
where closs_customer.codigo = ?
order by closs_order.kti_codven asc, closs_order.kti_fchdoc asc
`

func (q *Queries) GetAllOrdersByCustomer(ctx context.Context, codigo string) ([]ClossOrder, error) {
	rows, err := q.db.QueryContext(ctx, getAllOrdersByCustomer, codigo)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ClossOrder
	for rows.Next() {
		var i ClossOrder
		if err := rows.Scan(
			&i.KtiNdoc,
			&i.KtiTdoc,
			&i.KtiCodcli,
			&i.KtiNombrecli,
			&i.KtiCodven,
			&i.KtiDocsol,
			&i.KtiCondicion,
			&i.KtiTipprec,
			&i.KtiTotneto,
			&i.KtiStatus,
			&i.KtiNroped,
			&i.KtiFchdoc,
			&i.KtiNegesp,
			&i.KePedstatus,
			&i.Dolarflete,
			&i.Complemento,
			&i.NroComplemento,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllOrdersByManager = `-- name: GetAllOrdersByManager :many
;

select closs_order.kti_ndoc, closs_order.kti_tdoc, closs_order.kti_codcli, closs_order.kti_nombrecli, closs_order.kti_codven, closs_order.kti_docsol, closs_order.kti_condicion, closs_order.kti_tipprec, closs_order.kti_totneto, closs_order.kti_status, closs_order.kti_nroped, closs_order.kti_fchdoc, closs_order.kti_negesp, closs_order.ke_pedstatus, closs_order.dolarflete, closs_order.complemento, closs_order.nro_complemento, closs_order.created_at, closs_order.updated_at
from closs_order
left join closs_salesman on closs_order.kti_codven = closs_salesman.codigo
left join closs_managers on closs_salesman.supervpor = closs_managers.kng_codcoord
where closs_managers.kng_codgcia = ?
order by closs_order.kti_codven asc, closs_order.kti_fchdoc asc
`

func (q *Queries) GetAllOrdersByManager(ctx context.Context, kngCodgcia string) ([]ClossOrder, error) {
	rows, err := q.db.QueryContext(ctx, getAllOrdersByManager, kngCodgcia)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ClossOrder
	for rows.Next() {
		var i ClossOrder
		if err := rows.Scan(
			&i.KtiNdoc,
			&i.KtiTdoc,
			&i.KtiCodcli,
			&i.KtiNombrecli,
			&i.KtiCodven,
			&i.KtiDocsol,
			&i.KtiCondicion,
			&i.KtiTipprec,
			&i.KtiTotneto,
			&i.KtiStatus,
			&i.KtiNroped,
			&i.KtiFchdoc,
			&i.KtiNegesp,
			&i.KePedstatus,
			&i.Dolarflete,
			&i.Complemento,
			&i.NroComplemento,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllOrdersBySalesman = `-- name: GetAllOrdersBySalesman :many
;

select closs_order.kti_ndoc, closs_order.kti_tdoc, closs_order.kti_codcli, closs_order.kti_nombrecli, closs_order.kti_codven, closs_order.kti_docsol, closs_order.kti_condicion, closs_order.kti_tipprec, closs_order.kti_totneto, closs_order.kti_status, closs_order.kti_nroped, closs_order.kti_fchdoc, closs_order.kti_negesp, closs_order.ke_pedstatus, closs_order.dolarflete, closs_order.complemento, closs_order.nro_complemento, closs_order.created_at, closs_order.updated_at
from closs_order
left join closs_salesman on closs_order.kti_codven = closs_salesman.codigo
where closs_salesman.codigo = ?
order by closs_order.kti_codven asc, closs_order.kti_fchdoc asc
`

func (q *Queries) GetAllOrdersBySalesman(ctx context.Context, codigo string) ([]ClossOrder, error) {
	rows, err := q.db.QueryContext(ctx, getAllOrdersBySalesman, codigo)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ClossOrder
	for rows.Next() {
		var i ClossOrder
		if err := rows.Scan(
			&i.KtiNdoc,
			&i.KtiTdoc,
			&i.KtiCodcli,
			&i.KtiNombrecli,
			&i.KtiCodven,
			&i.KtiDocsol,
			&i.KtiCondicion,
			&i.KtiTipprec,
			&i.KtiTotneto,
			&i.KtiStatus,
			&i.KtiNroped,
			&i.KtiFchdoc,
			&i.KtiNegesp,
			&i.KePedstatus,
			&i.Dolarflete,
			&i.Complemento,
			&i.NroComplemento,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOrderByCode = `-- name: GetOrderByCode :one
;

select kti_ndoc, kti_tdoc, kti_codcli, kti_nombrecli, kti_codven, kti_docsol, kti_condicion, kti_tipprec, kti_totneto, kti_status, kti_nroped, kti_fchdoc, kti_negesp, ke_pedstatus, dolarflete, complemento, nro_complemento, created_at, updated_at
from closs_order
where kti_ndoc = ?
`

func (q *Queries) GetOrderByCode(ctx context.Context, ktiNdoc string) (ClossOrder, error) {
	row := q.db.QueryRowContext(ctx, getOrderByCode, ktiNdoc)
	var i ClossOrder
	err := row.Scan(
		&i.KtiNdoc,
		&i.KtiTdoc,
		&i.KtiCodcli,
		&i.KtiNombrecli,
		&i.KtiCodven,
		&i.KtiDocsol,
		&i.KtiCondicion,
		&i.KtiTipprec,
		&i.KtiTotneto,
		&i.KtiStatus,
		&i.KtiNroped,
		&i.KtiFchdoc,
		&i.KtiNegesp,
		&i.KePedstatus,
		&i.Dolarflete,
		&i.Complemento,
		&i.NroComplemento,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getOrderWithLinesByCode = `-- name: GetOrderWithLinesByCode :many
;

select closs_order.kti_ndoc, closs_order.kti_tdoc, kti_codcli, kti_nombrecli, kti_codven, kti_docsol, kti_condicion, closs_order.kti_tipprec, kti_totneto, kti_status, kti_nroped, kti_fchdoc, kti_negesp, ke_pedstatus, dolarflete, complemento, nro_complemento, closs_order.created_at, closs_order.updated_at, closs_order_lines.kti_tdoc, closs_order_lines.kti_ndoc, closs_order_lines.kti_tipprec, kmv_codart, kmv_nombre, kmv_cant, kmv_artprec, kmv_stot, kmv_dctolin, codigo, grupo, subgrupo, nombre, referencia, marca, unidad, discont, existencia, vta_max, vta_min, vta_minenx, comprometido, precio1, precio2, precio3, precio4, precio5, precio6, precio7, preventa, dctotope, vta_solofac, vta_solone, codbarras, detalles, cantbulto, costo_prom, util1, util2, util3, fchultcomp, qtyultcomp, images, closs_product.created_at, closs_product.updated_at, deleted_at
from closs_order
left join closs_order_lines on closs_order.kti_ndoc = closs_order_lines.kti_ndoc
left join closs_product on closs_product.codigo = closs_order_lines.kmv_codart
where closs_order.kti_ndoc = ?
`

type GetOrderWithLinesByCodeRow struct {
	KtiNdoc        string
	KtiTdoc        string
	KtiCodcli      string
	KtiNombrecli   string
	KtiCodven      string
	KtiDocsol      string
	KtiCondicion   string
	KtiTipprec     int64
	KtiTotneto     float64
	KtiStatus      int64
	KtiNroped      string
	KtiFchdoc      string
	KtiNegesp      int64
	KePedstatus    int64
	Dolarflete     int64
	Complemento    int64
	NroComplemento string
	CreatedAt      string
	UpdatedAt      string
	KtiTdoc_2      sql.NullString
	KtiNdoc_2      sql.NullString
	KtiTipprec_2   sql.NullInt64
	KmvCodart      sql.NullString
	KmvNombre      sql.NullString
	KmvCant        sql.NullInt64
	KmvArtprec     sql.NullFloat64
	KmvStot        sql.NullFloat64
	KmvDctolin     sql.NullFloat64
	Codigo         sql.NullString
	Grupo          sql.NullString
	Subgrupo       sql.NullString
	Nombre         sql.NullString
	Referencia     sql.NullString
	Marca          sql.NullString
	Unidad         sql.NullString
	Discont        sql.NullInt64
	Existencia     sql.NullInt64
	VtaMax         sql.NullInt64
	VtaMin         sql.NullInt64
	VtaMinenx      sql.NullInt64
	Comprometido   sql.NullInt64
	Precio1        sql.NullFloat64
	Precio2        sql.NullFloat64
	Precio3        sql.NullFloat64
	Precio4        sql.NullFloat64
	Precio5        sql.NullFloat64
	Precio6        sql.NullFloat64
	Precio7        sql.NullFloat64
	Preventa       sql.NullInt64
	Dctotope       sql.NullFloat64
	VtaSolofac     sql.NullInt64
	VtaSolone      sql.NullInt64
	Codbarras      sql.NullInt64
	Detalles       sql.NullString
	Cantbulto      sql.NullInt64
	CostoProm      sql.NullFloat64
	Util1          sql.NullFloat64
	Util2          sql.NullFloat64
	Util3          sql.NullFloat64
	Fchultcomp     sql.NullString
	Qtyultcomp     sql.NullInt64
	Images         sql.NullString
	CreatedAt_2    sql.NullString
	UpdatedAt_2    sql.NullString
	DeletedAt      sql.NullString
}

func (q *Queries) GetOrderWithLinesByCode(ctx context.Context, ktiNdoc string) ([]GetOrderWithLinesByCodeRow, error) {
	rows, err := q.db.QueryContext(ctx, getOrderWithLinesByCode, ktiNdoc)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetOrderWithLinesByCodeRow
	for rows.Next() {
		var i GetOrderWithLinesByCodeRow
		if err := rows.Scan(
			&i.KtiNdoc,
			&i.KtiTdoc,
			&i.KtiCodcli,
			&i.KtiNombrecli,
			&i.KtiCodven,
			&i.KtiDocsol,
			&i.KtiCondicion,
			&i.KtiTipprec,
			&i.KtiTotneto,
			&i.KtiStatus,
			&i.KtiNroped,
			&i.KtiFchdoc,
			&i.KtiNegesp,
			&i.KePedstatus,
			&i.Dolarflete,
			&i.Complemento,
			&i.NroComplemento,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.KtiTdoc_2,
			&i.KtiNdoc_2,
			&i.KtiTipprec_2,
			&i.KmvCodart,
			&i.KmvNombre,
			&i.KmvCant,
			&i.KmvArtprec,
			&i.KmvStot,
			&i.KmvDctolin,
			&i.Codigo,
			&i.Grupo,
			&i.Subgrupo,
			&i.Nombre,
			&i.Referencia,
			&i.Marca,
			&i.Unidad,
			&i.Discont,
			&i.Existencia,
			&i.VtaMax,
			&i.VtaMin,
			&i.VtaMinenx,
			&i.Comprometido,
			&i.Precio1,
			&i.Precio2,
			&i.Precio3,
			&i.Precio4,
			&i.Precio5,
			&i.Precio6,
			&i.Precio7,
			&i.Preventa,
			&i.Dctotope,
			&i.VtaSolofac,
			&i.VtaSolone,
			&i.Codbarras,
			&i.Detalles,
			&i.Cantbulto,
			&i.CostoProm,
			&i.Util1,
			&i.Util2,
			&i.Util3,
			&i.Fchultcomp,
			&i.Qtyultcomp,
			&i.Images,
			&i.CreatedAt_2,
			&i.UpdatedAt_2,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOrders = `-- name: GetOrders :many
select kti_ndoc, kti_tdoc, kti_codcli, kti_nombrecli, kti_codven, kti_docsol, kti_condicion, kti_tipprec, kti_totneto, kti_status, kti_nroped, kti_fchdoc, kti_negesp, ke_pedstatus, dolarflete, complemento, nro_complemento, created_at, updated_at
from closs_order
`

func (q *Queries) GetOrders(ctx context.Context) ([]ClossOrder, error) {
	rows, err := q.db.QueryContext(ctx, getOrders)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ClossOrder
	for rows.Next() {
		var i ClossOrder
		if err := rows.Scan(
			&i.KtiNdoc,
			&i.KtiTdoc,
			&i.KtiCodcli,
			&i.KtiNombrecli,
			&i.KtiCodven,
			&i.KtiDocsol,
			&i.KtiCondicion,
			&i.KtiTipprec,
			&i.KtiTotneto,
			&i.KtiStatus,
			&i.KtiNroped,
			&i.KtiFchdoc,
			&i.KtiNegesp,
			&i.KePedstatus,
			&i.Dolarflete,
			&i.Complemento,
			&i.NroComplemento,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOrdersByCustomer = `-- name: GetOrdersByCustomer :many
;

select closs_order.kti_ndoc, closs_order.kti_tdoc, closs_order.kti_codcli, closs_order.kti_nombrecli, closs_order.kti_codven, closs_order.kti_docsol, closs_order.kti_condicion, closs_order.kti_tipprec, closs_order.kti_totneto, closs_order.kti_status, closs_order.kti_nroped, closs_order.kti_fchdoc, closs_order.kti_negesp, closs_order.ke_pedstatus, closs_order.dolarflete, closs_order.complemento, closs_order.nro_complemento, closs_order.created_at, closs_order.updated_at
from closs_order
left join closs_customer on closs_order.kti_codcli = closs_customer.codigo
where
    closs_customer.codigo = ?
    and (closs_order.kti_status = 4 or closs_order.kti_status = 5)
    and closs_order.kti_nroped != ''
    and month(closs_order.kti_fchdoc) = month(now())
    and year(kti_fchdoc) = year(now())
order by closs_order.kti_codven asc, closs_order.kti_fchdoc asc
`

func (q *Queries) GetOrdersByCustomer(ctx context.Context, codigo string) ([]ClossOrder, error) {
	rows, err := q.db.QueryContext(ctx, getOrdersByCustomer, codigo)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ClossOrder
	for rows.Next() {
		var i ClossOrder
		if err := rows.Scan(
			&i.KtiNdoc,
			&i.KtiTdoc,
			&i.KtiCodcli,
			&i.KtiNombrecli,
			&i.KtiCodven,
			&i.KtiDocsol,
			&i.KtiCondicion,
			&i.KtiTipprec,
			&i.KtiTotneto,
			&i.KtiStatus,
			&i.KtiNroped,
			&i.KtiFchdoc,
			&i.KtiNegesp,
			&i.KePedstatus,
			&i.Dolarflete,
			&i.Complemento,
			&i.NroComplemento,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOrdersByManager = `-- name: GetOrdersByManager :many
;

select closs_order.kti_ndoc, closs_order.kti_tdoc, closs_order.kti_codcli, closs_order.kti_nombrecli, closs_order.kti_codven, closs_order.kti_docsol, closs_order.kti_condicion, closs_order.kti_tipprec, closs_order.kti_totneto, closs_order.kti_status, closs_order.kti_nroped, closs_order.kti_fchdoc, closs_order.kti_negesp, closs_order.ke_pedstatus, closs_order.dolarflete, closs_order.complemento, closs_order.nro_complemento, closs_order.created_at, closs_order.updated_at
from closs_order
left join closs_salesman on closs_order.kti_codven = closs_salesman.codigo
left join closs_managers on closs_salesman.supervpor = closs_managers.kng_codcoord
where
    closs_managers.kng_codgcia = ?
    and (closs_order.kti_status = 4 or closs_order.kti_status = 5)
    and closs_order.kti_nroped != ''
    and month(closs_order.kti_fchdoc) = month(now())
    and year(kti_fchdoc) = year(now())
order by closs_order.kti_codven asc, closs_order.kti_fchdoc asc
`

func (q *Queries) GetOrdersByManager(ctx context.Context, kngCodgcia string) ([]ClossOrder, error) {
	rows, err := q.db.QueryContext(ctx, getOrdersByManager, kngCodgcia)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ClossOrder
	for rows.Next() {
		var i ClossOrder
		if err := rows.Scan(
			&i.KtiNdoc,
			&i.KtiTdoc,
			&i.KtiCodcli,
			&i.KtiNombrecli,
			&i.KtiCodven,
			&i.KtiDocsol,
			&i.KtiCondicion,
			&i.KtiTipprec,
			&i.KtiTotneto,
			&i.KtiStatus,
			&i.KtiNroped,
			&i.KtiFchdoc,
			&i.KtiNegesp,
			&i.KePedstatus,
			&i.Dolarflete,
			&i.Complemento,
			&i.NroComplemento,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOrdersBySalesman = `-- name: GetOrdersBySalesman :many
;

select closs_order.kti_ndoc, closs_order.kti_tdoc, closs_order.kti_codcli, closs_order.kti_nombrecli, closs_order.kti_codven, closs_order.kti_docsol, closs_order.kti_condicion, closs_order.kti_tipprec, closs_order.kti_totneto, closs_order.kti_status, closs_order.kti_nroped, closs_order.kti_fchdoc, closs_order.kti_negesp, closs_order.ke_pedstatus, closs_order.dolarflete, closs_order.complemento, closs_order.nro_complemento, closs_order.created_at, closs_order.updated_at
from closs_order
left join closs_salesman on closs_order.kti_codven = closs_salesman.codigo
where
    closs_salesman.codigo = ?
    and (closs_order.kti_status = 4 or closs_order.kti_status = 5)
    and closs_order.kti_nroped != ''
    and month(closs_order.kti_fchdoc) = month(now())
    and year(kti_fchdoc) = year(now())
order by closs_order.kti_codven asc, closs_order.kti_fchdoc asc
`

func (q *Queries) GetOrdersBySalesman(ctx context.Context, codigo string) ([]ClossOrder, error) {
	rows, err := q.db.QueryContext(ctx, getOrdersBySalesman, codigo)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ClossOrder
	for rows.Next() {
		var i ClossOrder
		if err := rows.Scan(
			&i.KtiNdoc,
			&i.KtiTdoc,
			&i.KtiCodcli,
			&i.KtiNombrecli,
			&i.KtiCodven,
			&i.KtiDocsol,
			&i.KtiCondicion,
			&i.KtiTipprec,
			&i.KtiTotneto,
			&i.KtiStatus,
			&i.KtiNroped,
			&i.KtiFchdoc,
			&i.KtiNegesp,
			&i.KePedstatus,
			&i.Dolarflete,
			&i.Complemento,
			&i.NroComplemento,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOrdersWithLines = `-- name: GetOrdersWithLines :many
;

select closs_order.kti_ndoc, closs_order.kti_tdoc, kti_codcli, kti_nombrecli, kti_codven, kti_docsol, kti_condicion, closs_order.kti_tipprec, kti_totneto, kti_status, kti_nroped, kti_fchdoc, kti_negesp, ke_pedstatus, dolarflete, complemento, nro_complemento, closs_order.created_at, closs_order.updated_at, closs_order_lines.kti_tdoc, closs_order_lines.kti_ndoc, closs_order_lines.kti_tipprec, kmv_codart, kmv_nombre, kmv_cant, kmv_artprec, kmv_stot, kmv_dctolin, codigo, grupo, subgrupo, nombre, referencia, marca, unidad, discont, existencia, vta_max, vta_min, vta_minenx, comprometido, precio1, precio2, precio3, precio4, precio5, precio6, precio7, preventa, dctotope, vta_solofac, vta_solone, codbarras, detalles, cantbulto, costo_prom, util1, util2, util3, fchultcomp, qtyultcomp, images, closs_product.created_at, closs_product.updated_at, deleted_at
from closs_order
left join closs_order_lines on closs_order.kti_ndoc = closs_order_lines.kti_ndoc
left join closs_product on closs_product.codigo = closs_order_lines.kmv_codart
`

type GetOrdersWithLinesRow struct {
	KtiNdoc        string
	KtiTdoc        string
	KtiCodcli      string
	KtiNombrecli   string
	KtiCodven      string
	KtiDocsol      string
	KtiCondicion   string
	KtiTipprec     int64
	KtiTotneto     float64
	KtiStatus      int64
	KtiNroped      string
	KtiFchdoc      string
	KtiNegesp      int64
	KePedstatus    int64
	Dolarflete     int64
	Complemento    int64
	NroComplemento string
	CreatedAt      string
	UpdatedAt      string
	KtiTdoc_2      sql.NullString
	KtiNdoc_2      sql.NullString
	KtiTipprec_2   sql.NullInt64
	KmvCodart      sql.NullString
	KmvNombre      sql.NullString
	KmvCant        sql.NullInt64
	KmvArtprec     sql.NullFloat64
	KmvStot        sql.NullFloat64
	KmvDctolin     sql.NullFloat64
	Codigo         sql.NullString
	Grupo          sql.NullString
	Subgrupo       sql.NullString
	Nombre         sql.NullString
	Referencia     sql.NullString
	Marca          sql.NullString
	Unidad         sql.NullString
	Discont        sql.NullInt64
	Existencia     sql.NullInt64
	VtaMax         sql.NullInt64
	VtaMin         sql.NullInt64
	VtaMinenx      sql.NullInt64
	Comprometido   sql.NullInt64
	Precio1        sql.NullFloat64
	Precio2        sql.NullFloat64
	Precio3        sql.NullFloat64
	Precio4        sql.NullFloat64
	Precio5        sql.NullFloat64
	Precio6        sql.NullFloat64
	Precio7        sql.NullFloat64
	Preventa       sql.NullInt64
	Dctotope       sql.NullFloat64
	VtaSolofac     sql.NullInt64
	VtaSolone      sql.NullInt64
	Codbarras      sql.NullInt64
	Detalles       sql.NullString
	Cantbulto      sql.NullInt64
	CostoProm      sql.NullFloat64
	Util1          sql.NullFloat64
	Util2          sql.NullFloat64
	Util3          sql.NullFloat64
	Fchultcomp     sql.NullString
	Qtyultcomp     sql.NullInt64
	Images         sql.NullString
	CreatedAt_2    sql.NullString
	UpdatedAt_2    sql.NullString
	DeletedAt      sql.NullString
}

func (q *Queries) GetOrdersWithLines(ctx context.Context) ([]GetOrdersWithLinesRow, error) {
	rows, err := q.db.QueryContext(ctx, getOrdersWithLines)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetOrdersWithLinesRow
	for rows.Next() {
		var i GetOrdersWithLinesRow
		if err := rows.Scan(
			&i.KtiNdoc,
			&i.KtiTdoc,
			&i.KtiCodcli,
			&i.KtiNombrecli,
			&i.KtiCodven,
			&i.KtiDocsol,
			&i.KtiCondicion,
			&i.KtiTipprec,
			&i.KtiTotneto,
			&i.KtiStatus,
			&i.KtiNroped,
			&i.KtiFchdoc,
			&i.KtiNegesp,
			&i.KePedstatus,
			&i.Dolarflete,
			&i.Complemento,
			&i.NroComplemento,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.KtiTdoc_2,
			&i.KtiNdoc_2,
			&i.KtiTipprec_2,
			&i.KmvCodart,
			&i.KmvNombre,
			&i.KmvCant,
			&i.KmvArtprec,
			&i.KmvStot,
			&i.KmvDctolin,
			&i.Codigo,
			&i.Grupo,
			&i.Subgrupo,
			&i.Nombre,
			&i.Referencia,
			&i.Marca,
			&i.Unidad,
			&i.Discont,
			&i.Existencia,
			&i.VtaMax,
			&i.VtaMin,
			&i.VtaMinenx,
			&i.Comprometido,
			&i.Precio1,
			&i.Precio2,
			&i.Precio3,
			&i.Precio4,
			&i.Precio5,
			&i.Precio6,
			&i.Precio7,
			&i.Preventa,
			&i.Dctotope,
			&i.VtaSolofac,
			&i.VtaSolone,
			&i.Codbarras,
			&i.Detalles,
			&i.Cantbulto,
			&i.CostoProm,
			&i.Util1,
			&i.Util2,
			&i.Util3,
			&i.Fchultcomp,
			&i.Qtyultcomp,
			&i.Images,
			&i.CreatedAt_2,
			&i.UpdatedAt_2,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOrder = `-- name: UpdateOrder :one
update closs_order set 
    kti_tdoc = ?,
    kti_codcli = ?,
    kti_nombrecli = ?,
    kti_codven = ?,
    kti_docsol = ?,
    kti_condicion = ?,
    kti_tipprec = ?,
    kti_totneto = ?,
    kti_status = ?,
    kti_nroped = ?,
    kti_fchdoc = ?,
    kti_negesp = ?,
    ke_pedstatus = ?,
    dolarflete = ?,
    complemento = ?,
    nro_complemento = ?,
    updated_at = ?
WHERE kti_ndoc = ?
RETURNING kti_ndoc, kti_tdoc, kti_codcli, kti_nombrecli, kti_codven, kti_docsol, kti_condicion, kti_tipprec, kti_totneto, kti_status, kti_nroped, kti_fchdoc, kti_negesp, ke_pedstatus, dolarflete, complemento, nro_complemento, created_at, updated_at
`

type UpdateOrderParams struct {
	KtiTdoc        string
	KtiCodcli      string
	KtiNombrecli   string
	KtiCodven      string
	KtiDocsol      string
	KtiCondicion   string
	KtiTipprec     int64
	KtiTotneto     float64
	KtiStatus      int64
	KtiNroped      string
	KtiFchdoc      string
	KtiNegesp      int64
	KePedstatus    int64
	Dolarflete     int64
	Complemento    int64
	NroComplemento string
	UpdatedAt      string
	KtiNdoc        string
}

func (q *Queries) UpdateOrder(ctx context.Context, arg UpdateOrderParams) (ClossOrder, error) {
	row := q.db.QueryRowContext(ctx, updateOrder,
		arg.KtiTdoc,
		arg.KtiCodcli,
		arg.KtiNombrecli,
		arg.KtiCodven,
		arg.KtiDocsol,
		arg.KtiCondicion,
		arg.KtiTipprec,
		arg.KtiTotneto,
		arg.KtiStatus,
		arg.KtiNroped,
		arg.KtiFchdoc,
		arg.KtiNegesp,
		arg.KePedstatus,
		arg.Dolarflete,
		arg.Complemento,
		arg.NroComplemento,
		arg.UpdatedAt,
		arg.KtiNdoc,
	)
	var i ClossOrder
	err := row.Scan(
		&i.KtiNdoc,
		&i.KtiTdoc,
		&i.KtiCodcli,
		&i.KtiNombrecli,
		&i.KtiCodven,
		&i.KtiDocsol,
		&i.KtiCondicion,
		&i.KtiTipprec,
		&i.KtiTotneto,
		&i.KtiStatus,
		&i.KtiNroped,
		&i.KtiFchdoc,
		&i.KtiNegesp,
		&i.KePedstatus,
		&i.Dolarflete,
		&i.Complemento,
		&i.NroComplemento,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
